{"version":3,"sources":["common/MainImageWrapper/MainImageWrapper.module.css","components/RightBar/FollowUser/FollowUser.module.css","util/Validator.ts","components/Profile/MyPosts/MyPosts.module.css","components/NavBar/NavBar.module.css","assets/image/lamp.jpg","hoc/withAuthRedirect.tsx","redux/DialogsReducer.ts","assets/image/Голубой Круг Бизнес Логотип (5).png","components/Profile/MyPosts/Post/Post.module.css","assets/image/Rolling-1s-200px.svg","assets/image/darkBlueSpider.png","assets/image/houses.jpg","common/Paginator/Paginator.module.css","assets/image/666.jpg","components/RightBar/RightBar.module.css","api/api.ts","util/errorUtils.ts","components/Profile/Profile.module.css","components/NavBar/NavBar.tsx","components/Header/Header.tsx","redux/ProfileReducer.ts","components/Header/HeaderContainer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","common/Preloader/Preloader.tsx","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileBur.tsx","components/Profile/ProfileInfo/ProfileStatusWithUseState.tsx","components/Profile/ProfileAva/ProfileAva.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/SearchForm.tsx","components/Users/Users.tsx","redux/UsersReducer.ts","redux/UsersSelectors.ts","components/Users/UsersContainer.tsx","components/RightBar/FollowUser/FollowUser.tsx","components/RightBar/RightBar.tsx","components/RightBar/RightBarContainer.tsx","redux/StoreRedux.ts","hoc/withSuspense.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","App.tsx","serviceWorker.ts","index.tsx","redux/AppReducer.ts","common/FormControl/FormControl.module.css","common/FormControl/FormControl.tsx","components/Header/Header.module.css","components/Users/Users.module.css","redux/AuthReducer.ts","redux/enumActionsType.ts","assets/image/Голубой Круг Бизнес Логотип (3).png","common/MainImageWrapper/MainImageWrapper.tsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","connect","withAuthRedirect","WrappedComponent","props","restProps","to","initialState","dialogs","id","name","messages","textMessage","dialogsReducer","action","type","ACTIONS_TYPE","SEND_MESSAGE","bodyMessage","newMessage","sendMessageActionCreator","instance","Axios","create","baseURL","withCredentials","headers","UserAPI","getUsers","currentPage","pageSize","get","postUserFollow","userId","post","deleteUserFollow","delete","AuthAPI","getAuthMe","login","email","password","rememberMe","captcha","logout","SecurityAPI","getCaptchaUrl","ProfileAPI","getUserProfile","getStatus","updateStatus","status","put","saveProfile","profile","savePhoto","photoFile","formData","FormData","append","handleServerNetworkError","error","dispatch","setErrorAC","message","NavBar","React","memo","className","style","navBur","item","activeClassName","active","icon","faAddressCard","size","faCommentDots","faUsers","faPlayCircle","faRss","faCog","Header","header","logo","href","src","searchBur","loginBlock","photos","small","userPhoto","onClick","posts","likesCount","setStatus","SET_STATUS","getProfile","a","response","data","SET_USER_PROFILE","resultCode","file","SAVE_PHOTO_SUCCESS","getState","stopSubmit","_error","Promise","reject","HeaderContainer","render","PureComponent","mapStateToProps","profilePage","authorizedUserId","Post","maxLength10","AddPostForm","onSubmit","handleSubmit","Field","component","TextArea","validate","AddPostReduxForm","reduxForm","form","MyPosts","PostElements","map","key","myPosts","addPost","newPost","MyPostsContainer","newPostText","ADD_POST","Preloader","spinner","Contacts","contacts","contactTitle","contactValue","ProfileData","profileData","isOwner","activateEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","ProfileDataForm","profileForm","formSummeryError","Input","placeholder","initialValues","ProfileDataReduxForm","ProfileInfo","useState","editMode","setEditMode","then","ProfileBur","useRouteMatch","url","path","profileBur","ProfileStatusWithUseState","useEffect","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","ProfileAva","ava","large","userProfilePhoto","target","files","Profile","useParams","mainImage","backgroundImage","mainImg","profileContant","MainImageWrapper","title","ProfileContainer","refrashProfile","match","params","history","push","componentDidMount","componentDidUpdate","prevProps","prevState","compose","withRouter","Paginator","i","totalItemsCount","onChangePage","portionSize","pageCount","Math","ceil","pages","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","filter","p","currentPageClass","selectedPage","User","user","followingInProgress","follow","unfollow","userAvatar","followed","disabled","some","userInfo","city","SearchReduxForm","searchForm","searchButton","faSearch","Users","users","usersTotalCount","usersContant","alert","term","u","isFetching","setCurrentPage","SETCURRENTPAGE","toggleIsFetching","TOGGLEISFATCHING","toggleFollowingInProgress","TOGGLEFOLLOWINGINPROGRESS","items","SETUSERS","totalCount","SETUSERSTOTALCOUNT","actionId","FOLLOW","UNFOLLOW","getUsersSuperSelector","createSelector","usersPage","getPageSizeSelector","getUsersTotalCountSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingInProgressSelector","UsersContainer","onCgangePage","pageNumber","FollowUser","followUser","followUserAvatar","followUserBody","RightBar","rightBur","RightBarContainer","redusers","combineReducers","newPstBody","REMOVE_POST","postId","stateCopy","dialogsPage","authReducer","formReducer","app","appReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Component","fallback","Alert","elevation","variant","ErrorSnackBar","useSelector","useDispatch","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","DialogsContainer","lazy","Settings","News","Music","Login","ChatPage","App","initializeApp","isInitialized","exact","AppContainer","MainApp","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","INITIALIZED_SUCCESSED","SET_ERROR","promise","getMe","all","FormControl","meta","children","hasError","touched","formControl","errorSpan","input","formInput","captchaUrl","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","setUserData","getCaptchaUrlSuccess","mainImageWrapper","titleOnImage","titleOnImageBlock"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,aAAe,uCAAuC,kBAAoB,8C,oBCA1JD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,iBAAmB,qCAAqC,eAAiB,qC,iCCDvI,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,sBAEEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GAChD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,gB,oBCJ/CL,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,mBCA7DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,OAAS,uBAAuB,KAAO,uB,oBCDrHD,EAAOC,QAAU,IAA0B,kC,+GCKvCM,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAITE,YAAQJ,EAA4B,IAI/C,SAASK,EAAuBC,GAQnC,OADiCF,YAAwBJ,EAA4B,GAApDI,EALjC,SAA4BG,GAAuB,IAC1CL,EAAwBK,EAAxBL,OAAWM,EAD8B,YACjBD,EADiB,YAE1C,OAAKL,EACE,kBAACI,EAAqBE,GADR,kBAAC,IAAD,CAAUC,GAAI,gB,+HCjB3CC,EAAgB,CAChBC,QAAS,CACL,CAAEC,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,QACf,CAAED,GAAI,EAAGC,KAAM,SAEnBC,SAAU,CACN,CAAEF,GAAI,EAAGG,YAAa,MACtB,CAAEH,GAAI,EAAGG,YAAa,SACtB,CAAEH,GAAI,EAAGG,YAAa,iBAIjBC,EAAiB,WAAkE,IAAjEf,EAAgE,uDAAxDS,EAAcO,EAA0C,uCAC3F,OAAQA,EAAOC,MACX,KAAKC,IAAaC,aACd,IAAIC,EAAcJ,EAAOK,WACzB,OAAO,2BACArB,GADP,IAEIa,SAAS,GAAD,mBAAMb,EAAMa,UAAZ,CAAsB,CAACF,GAAG,EAAGG,YAAYM,OAIzD,QAAS,OAAOpB,IAGXsB,EAA2B,SAACD,GAAD,MAAsB,CAACJ,KAAMC,IAAaC,aAAcE,gB,oBC5BhG7B,EAAOC,QAAU,IAA0B,qL,oBCC3CD,EAAOC,QAAU,CAAC,KAAO,qB,oBCDzBD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCC3CD,EAAOC,QAAU,CAAC,aAAe,kC,oBCDjCD,EAAOC,QAAU,IAA0B,iC,oBCC3CD,EAAOC,QAAU,CAAC,SAAW,6B,kHCD7B,qJAGM8B,EAHN,OAGiBC,EAAMC,OAAQ,CAC3BC,QAAS,gDACRC,iBAAiB,EACjBC,QAAS,CAAC,UAAW,0CAGbC,EAAU,CACnBC,SADmB,SACTC,EAAqBC,GAC3B,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,mBAAiDC,KAE5DE,eAJmB,SAIHC,GACZ,OAAOZ,EAASa,KAAK,UAAYD,EAAQ,KAE7CE,iBAPmB,SAODF,GACd,OAAOZ,EAASe,OAAO,UAAWH,KAI7BI,EAAU,CACnBC,UADmB,WAEf,OAAOjB,EAASU,IAAT,YAEXQ,MAJmB,SAIZC,EAAeC,EAAiBC,EAAqBC,GACxD,OAAOtB,EAASa,KAAT,aAA4B,CAACM,QAAOC,WAAUC,aAAYC,aAErEC,OAPmB,WAQf,OAAOvB,EAASe,OAAT,gBAIFS,EAAc,CACvBC,cADuB,WAEnB,OAAOzB,EAASU,IAAT,8BAIFgB,EAAa,CACtBC,eADsB,SACNf,GACZ,OAAOZ,EAASU,IAAI,WAAaE,IAErCgB,UAJsB,SAIXhB,GACP,OAAOZ,EAASU,IAAI,kBAAoBE,IAE5CiB,aAPsB,SAORC,GACV,OAAO9B,EAAS+B,IAAT,iBAA+B,CAACD,YAE3CE,YAVsB,SAUVC,GACR,OAAOjC,EAAS+B,IAAT,WAAyBE,IAEpCC,UAbsB,SAaXC,GACP,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBnC,EAAS+B,IAAT,gBAA8BK,EAAU,CAC3C/B,QAAS,CACL,eAAiB,4B,gCCxDjC,8CAWckC,EAA2B,SAACC,EAAYC,GAClDA,EAASC,YAAWF,EAAMG,QAAUH,EAAMG,QAAU,iB,mBCZxD1E,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,IAAM,qBAAqB,YAAc,6BAA6B,WAAa,4BAA4B,KAAO,sBAAsB,OAAS,0B,gLCW3M0E,EAASC,IAAMC,MAAK,WAC/B,OACE,yBAAKC,UAAWC,IAAMC,QACpB,yBAAKF,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,WAAWkE,gBAAiBH,IAAMI,QAC5C,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMC,IAAeC,KAAK,OADpE,YAGF,yBAAKR,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,WAAWkE,gBAAiBH,IAAMI,QAC5C,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMG,IAAeD,KAAK,OADpE,YAGF,yBAAKR,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,SAASkE,gBAAiBH,IAAMI,QAC1C,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMI,IAASF,KAAK,OAD9D,UAGF,yBAAKR,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,SAASkE,gBAAiBH,IAAMI,QAC1C,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMK,IAAcH,KAAK,OADnE,UAGF,yBAAKR,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,QAAQkE,gBAAiBH,IAAMI,QACzC,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMM,IAAOJ,KAAK,OAD5D,SAGF,yBAAKR,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,YAAYkE,gBAAiBH,IAAMI,QAC7C,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMO,IAAOL,KAAK,OAD5D,aAGF,yBAAKR,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAG,QAAQkE,gBAAiBH,IAAMI,QACzC,kBAAC,IAAD,CAAiBL,UAAWC,IAAMK,KAAMA,KAAMO,IAAOL,KAAK,OAD5D,a,oDC7BKM,EAAShB,IAAMC,MAAM,SAAC/D,GAE/B,OACA,yBAAKgE,UAAWC,IAAMc,QACpB,yBAAKf,UAAWC,IAAMe,MACpB,uBAAGC,KAAK,IACR,yBAAKC,IAAKF,MACR,kDAIJ,yBAAKhB,UAAWC,IAAMkB,YAIpB,yBAAKnB,UAAWC,IAAMmB,YACK,MAAxBpF,EAAMkD,QAAQmC,QACb,yBAAKH,IAAKlF,EAAMkD,QAAQmC,OAAOC,OAASC,MAG3CvF,EAAML,OACH,6BAAMK,EAAMmC,MAAZ,KAAoB,4BAAQqD,QAASxF,EAAMwC,QAAvB,UAApB,KACA,kBAAC,IAAD,CAAStC,GAAG,SAASkE,gBAAiBH,IAAMI,QAA5C,c,8EC5BRlE,EAAe,CACfsF,MAAO,CACH,CAAEpF,GAAI,EAAGuD,QAAS,sBAAuB8B,WAAY,GACrD,CAAErF,GAAI,EAAGuD,QAAS,KAAM8B,WAAY,GACpC,CAAErF,GAAI,EAAGuD,QAAS,QAAS8B,WAAY,IAE3CxC,QAAS,GACTH,OAAQ,IAwCC4C,EAAY,SAAC5C,GAAD,MAAqB,CAACpC,KAAMC,IAAagF,WAAY7C,WAIjE8C,EAAa,SAAChE,GAAD,8CAC1B,WAAO6B,GAAP,eAAAoC,EAAA,+EAE6BnD,IAAWC,eAAef,GAFvD,OAEYkE,EAFZ,OAGQrC,GATuBR,EASC6C,EAASC,KATQ,CAACrF,KAAMC,IAAaqF,iBAAkB/C,aAMvF,gDAKQM,YAAyB,EAAD,GAAQE,GALxC,kCAN8B,IAACR,IAM/B,oBAD0B,uDAUbL,EAAY,SAAChB,GAAD,8CACzB,WAAO6B,GAAP,eAAAoC,EAAA,+EAE6BnD,IAAWE,UAAUhB,GAFlD,OAEYkE,EAFZ,OAGQrC,EAASiC,EAAUI,EAASC,OAHpC,gDAKQxC,YAAyB,EAAD,GAAQE,GALxC,yDADyB,uDAUZZ,EAAe,SAACC,GAAD,8CACxB,WAAOW,GAAP,SAAAoC,EAAA,+EAE6BnD,IAAWG,aAAaC,GAFrD,OAGyC,IAHzC,OAGqBiD,KAAKE,YACdxC,EAASiC,EAAU5C,IAJ/B,gDAOQS,YAAyB,EAAD,GAAQE,GAPxC,yDADwB,uDAYfP,EAAY,SAACgD,GAAD,8CACrB,WAAOzC,GAAP,eAAAoC,EAAA,+EAE6BnD,IAAWQ,UAAUgD,GAFlD,OAGyC,KAD7BJ,EAFZ,QAGqBC,KAAKE,YACdxC,GAvCiB2B,EAuCSU,EAASC,KAAKA,KAAKX,OAvCX,CAAC1E,KAAMC,IAAawF,mBAAoBf,YAmCtF,gDAOQ7B,YAAyB,EAAD,GAAQE,GAPxC,kCAnC4B,IAAC2B,IAmC7B,oBADqB,uDAYZpC,EAAc,SAACC,GAAD,8CAE3B,WAAOQ,EAAe2C,GAAtB,mBAAAP,EAAA,6DAESjE,EAASwE,IAAWzG,KAAKS,GAFlC,kBAI6BsC,IAAWM,YAAYC,GAJpD,UAKyC,KAD7B6C,EAJZ,QAKqBC,KAAKE,WAL1B,iBAMYxC,EAASmC,EAAYhE,IANjC,+BAQgB+B,EAAUmC,EAASC,KAAKzF,SAASf,OAAS,EAAIuG,EAASC,KAAKzF,SAAS,GAAK,aAC9EmD,EAAS4C,YAAW,kBAAmB,CAAEC,OAAQ3C,KAT7D,kBAUmB4C,QAAQC,OAAOV,EAASC,KAAKzF,SAAS,KAVzD,0DAaQiD,YAAyB,EAAD,GAAQE,GAbxC,0DAF2B,yDC3FdgD,EAAb,4MACAC,OAAS,WACL,OAAO,yBAAK3C,UAAWC,IAAMc,QACzB,kBAACD,EAAD,iBAAY,EAAK9E,MAAjB,CAAwBkD,QAAS,EAAKlD,MAAMkD,aAHpD,YAAqCY,IAAM8C,eAQvCC,EAAkB,SAACnH,GACnB,MAAO,CACHyC,MAAOzC,EAAME,KAAKuC,MAClBxC,OAAQD,EAAME,KAAKD,OACnBuD,QAASxD,EAAMoH,YAAY5D,QAC3B6D,iBAAkBrH,EAAME,KAAKS,KAOtBR,GAJKA,YAAQgH,EAAkB,CAACrE,WAAQqD,eAIxChG,YAAQgH,EAAiB,CAACrE,WAAQqD,cAAlChG,CAAiD6G,I,qDCpBnDM,EAAOlD,IAAMC,MAAM,SAAC/D,GAC/B,OACI,yBAAKgE,UAAWC,IAAMnC,MACpB,yBAAKoD,IAAI,0DACRlF,EAAM4D,QACP,6BACE,sCADF,IACqB5D,EAAM0F,gB,qCCV/BuB,GAAc3H,aAAiB,IAEtB4H,GAAcpD,IAAMC,MAAM,SAAC/D,GACtC,OACE,0BAAMmH,SAAUnH,EAAMoH,cAEnB,6BAAK,kBAACC,EAAA,EAAD,CAAOC,UAAWC,KAAUjH,KAAK,UAAUK,KAAK,OAAO6G,SAAU,CAACpI,KAAU6H,MAAjF,KACD,6BAAK,iDAKEQ,GAAmBC,YAAU,CACxCC,KAAM,WADwBD,CAE7BR,ICPUU,GAAU9D,IAAMC,MAAM,SAAC/D,GAClC,IAAI6H,EAAe7H,EAAMyF,MAAMqC,KAAK,SAAChG,GAAD,OACpC,kBAACkF,EAAD,CAAMpD,QAAS9B,EAAK8B,QAAS8B,WAAY5D,EAAK4D,WAAYrF,GAAIyB,EAAKzB,GAAI0H,IAAKjG,EAAKzB,QAMjF,OACE,yBAAK2D,UAAWC,IAAM+D,SACpB,wCACA,kBAACP,GAAD,CAAmBN,SAPP,SAAC9H,GACfW,EAAMiI,QAAQ5I,EAAM6I,YAOlB,yBAAKlE,UAAWC,IAAMwB,OACnBoC,OCPIM,GAAmBtI,aAdV,SAACH,GACrB,MAAO,CACJ+F,MAAO/F,EAAMoH,YAAYrB,MACzB2C,YAAa1I,EAAMoH,YAAYsB,gBAGX,SAAC1E,GACxB,MAAO,CACLuE,QAAS,SAACC,GACRxE,ELqCiB,SAACwE,GAAD,MAAmB,CAACvH,KAAMC,IAAayH,SAAUH,WKrCzDD,CAAQC,QAKSrI,CAAgD+H,I,8BCfzE,SAASU,KACd,OAAO,6BACL,yBAAKpD,IAAKqD,QCIP,IAAMC,GAAW1E,IAAMC,MAAM,SAAC/D,GACjC,OACI,yBAAMgE,UAAaC,IAAMwE,UACtB,2BAAIzI,EAAM0I,aAAV,MADH,IACkC1I,EAAM2I,iBCCnCC,GAAc9E,IAAMC,MAAK,SAAC/D,GAErC,OAEE,yBAAKgE,UAAWC,IAAM4E,aACnB7I,EAAM8I,SAAW,6BAAK,4BAAQtD,QAAWxF,EAAM+I,kBAAzB,SAEvB,wCACA,6BACE,0CADF,IACsB/I,EAAMkD,QAAQ8F,UAGpC,6BACE,kDADF,IAC8BhJ,EAAMkD,QAAQ+F,gBAE5C,6BACE,0CADF,IACsBjJ,EAAMkD,QAAQgG,2BAEpC,6BACE,yCADF,IACqBlJ,EAAMkD,QAAQiG,SAEnC,6BACE,yCAECnJ,EAAMkD,QAAQuF,UAAYW,OAAOC,KAAKrJ,EAAMkD,QAAQuF,UAAUX,KAAI,SAAAC,GAEjE,OAAO,kBAACS,GAAD,CAAUT,IAAKA,EAAKW,aAAcX,EACvCY,aAAe3I,EAAMkD,QAAQuF,SAASV,a,oBC7B5CuB,GAAkBxF,IAAMC,MAAK,SAAC/D,GAClC,OACE,0BAAMmH,SAAUnH,EAAMoH,aAAcpD,UAAWC,KAAMsF,aACnD,6BAAK,yCACJvJ,EAAMyD,OAAS,yBAAMO,UAAWC,KAAMuF,kBAAmBxJ,EAAMyD,OAChE,wCACA,kCAAO,0CAAkB,kBAAC4D,EAAA,EAAD,CAAO/G,KAAK,WAAWgH,UAAWmC,KAAO9I,KAAK,OAAO+I,YAAa,eAC3F,6BAAK,kDAAL,IAAgC,kBAACrC,EAAA,EAAD,CAAO/G,KAAK,iBAAiBgH,UAAWmC,KAAO9I,KAAK,aAApF,qBACA,6BAAK,0CAAkB,kBAAC0G,EAAA,EAAD,CAAO/G,KAAK,4BAA4BgH,UAAWmC,KAAO9I,KAAK,OAAO+I,YAAa,mCAC1G,6BAAK,yCAAiB,kBAACrC,EAAA,EAAD,CAAO/G,KAAK,UAAUgH,UAAWmC,KAAO9I,KAAK,OAAO+I,YAAa,cACvF,6BAAK,yCAAL,IAAwBN,OAAOC,KAAKrJ,EAAM2J,cAAclB,UAAUX,KAAI,SAAAC,GAEpE,OAAO,yBAAKA,IAAKA,GACf,2BAAIA,EAAJ,MAAW,kBAACV,EAAA,EAAD,CAAO/G,KAAM,YAAmByH,EAAKT,UAAWmC,KAAO9I,KAAK,OAAO+I,YAAa3B,cAenF6B,GALalC,YAAU,CACrCC,KAAM,mBADqBD,CAE1B4B,ICtBQO,GAAc/F,IAAMC,MAAK,SAAC/D,GACrC,IAAKA,EAAMkD,QAAW,OAAO,kBAACoF,GAAD,MADwC,MAGvCwB,oBAAkB,GAHqB,oBAGhEC,EAHgE,KAGtDC,EAHsD,KAcrE,OACE,6BAEGD,EAAW,kBAAC,GAAD,CAAkBJ,cAAgB3J,EAAMkD,QAASiE,SAZ/C,SAAC9D,GACjBrD,EAAMiD,YAAYI,GAEjB4G,MACC,WACED,GAAY,SAQD,kBAACpB,GAAD,CAAa1F,QAASlD,EAAMkD,QAChB4F,QAAS9I,EAAM8I,QACfC,iBAAkB,WAAMiB,GAAY,UC9BtDE,GAAapG,IAAMC,MAAM,WAAO,IAAD,EACtBoG,cAARC,GAD8B,EACpCC,KADoC,EAC9BD,KACV,OACI,yBAAKpG,UAAWC,IAAMqG,YACtB,yBAAKtG,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAE,UAAKkK,EAAL,YAAoBhG,gBAAiBH,IAAMI,QAAtD,aAEF,yBAAKL,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASjE,GAAE,UAAKkK,EAAL,YAAmBhG,gBAAiBH,IAAMI,QAArD,c,mDCLGkG,GAA4BzG,IAAMC,MAAM,SAAC/D,GAAmC,IAAD,EACxD8J,oBAAkB,GADsC,oBACjFC,EADiF,KACvEC,EADuE,OAE5DF,mBAAiB9J,EAAM+C,QAFqC,oBAEjFA,EAFiF,KAEzE4C,EAFyE,KAoBtF,OALA6E,qBAAU,WACR7E,EAAU3F,EAAM+C,UACjB,CAAC/C,EAAM+C,SAIN,6BACIgH,EACE,6BACA,2BAAOU,SAbQ,SAACC,GACtB/E,EAAU+E,EAAEC,cAActL,QAYauL,WAAW,EAAMC,OAjB/B,WACzBb,GAAY,GACZhK,EAAM8C,aAAaC,IAeiEpC,KAAK,OAAOtB,MAAO0D,KAGnG,6BACE,0BAAM+H,cAxBW,WACvBd,GAAY,KAuBkChK,EAAM+C,QAAU,aCpBrDgI,GAAajH,IAAMC,MAAK,SAAC/D,GAMlC,OAAO,yBAAKgE,UAAWC,IAAM+G,KACA,MAAxBhL,EAAMkD,QAAQmC,QACX,yBAAKH,IAAKlF,EAAMkD,QAAQmC,OAAO4F,OAASC,OAE3ClL,EAAM8I,SAAW,2BAAO2B,SATH,SAACC,GACD,MAAlBA,EAAES,OAAOC,OACXpL,EAAMmD,UAAUuH,EAAES,OAAOC,MAAM,KAOqBzK,KAAK,SAC3D,kBAAC4J,GAAD,CAA2BxH,OAAQ/C,EAAM+C,OAAQD,aAAc9C,EAAM8C,mBCJhEuI,GAAUvH,IAAMC,MAAM,SAAC/D,GAA4B,IAEpD6B,EAAWyJ,cAAXzJ,OAEJiH,GAAU,GACTjH,IAAW7B,EAAM+G,mBACf+B,GAAU,GAIjB,IAAMyC,EAAW,CACbC,gBAAgB,OAAD,OAASC,KAAT,MAXwC,EAarCtB,cAAdE,EAbmD,EAanDA,KAbmD,EAa7CD,IAEd,OAAO,yBAAKpG,UAAWC,IAAMyH,gBACzB,kBAACC,GAAA,EAAD,CAAkBJ,UAAWA,EAAWK,MAAM,YAE9C,kBAACb,GAAD,CAAYjC,QAASA,EACT5F,QAASlD,EAAMkD,QACfC,UAAWnD,EAAMmD,UACjBJ,OAAQ/C,EAAM+C,OACdD,aAAc9C,EAAM8C,eAEhC,kBAACoH,GAAD,MAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOG,KAAI,UAAKA,EAAL,YAAqB1D,OAAQ,kBACpC,kBAACkD,GAAD,CAAaf,QAASA,EACT5F,QAASlD,EAAMkD,QACfD,YAAajD,EAAMiD,iBACpC,kBAAC,IAAD,CAAOoH,KAAI,UAAKA,EAAL,YAAqB1D,OAAQ,kBACpC,kBAACwB,GAAD,c,mBC9CH0D,GAAb,4MACIC,eAAiB,WACb,IAAIjK,EAAU,EAAK7B,MAAM+L,MAAMC,OAAOnK,OACtC,IAAKA,IACDA,EAAU,EAAK7B,MAAM+G,iBACrB,EAAK/G,MAAMiM,QAAQC,KAAnB,mBAAoCrK,KAE/BA,GACD,OAAO,EAAK7B,MAAMiM,QAAQC,KAAK,UAGvC,EAAKlM,MAAM6F,YAAYhE,GACvB,EAAK7B,MAAM6C,WAAWhB,IAZ9B,EAcIsK,kBAAoB,WAChB,EAAKL,kBAfb,EAkBIM,mBAAqB,SAACC,EAAgBC,GAC9B,EAAKtM,MAAM+L,MAAMC,OAAOnK,SAAWwK,EAAUN,MAAMC,OAAOnK,QAC1D,EAAKnC,QAAU4M,GACf,EAAKR,kBArBjB,EA0BInF,OAAS,WACL,OAAO,6BACH,kBAAC0E,GAAD,iBAAa,EAAKrL,MAAlB,CAAyBkD,QAAS,EAAKlD,MAAMkD,QACpBJ,aAAgB,EAAK9C,MAAM8C,aAC3BC,OAAQ,EAAK/C,MAAM+C,OACnBI,UAAW,EAAKnD,MAAMmD,UACtB4D,iBAAmB,EAAK/G,MAAM+G,iBAC9B9D,YAAe,EAAKjD,MAAMiD,iBAjC/D,YAAsCa,IAAM8C,eAuCxCC,GAAkB,SAACnH,GACnB,MAAO,CACHwD,QAASxD,EAAMoH,YAAY5D,QAC3BH,OAAQrD,EAAMoH,YAAY/D,OAC1BgE,iBAAmBrH,EAAME,KAAKS,KAWvBkM,IAPG1M,YAAQgH,GAAkB,CAAEhB,aAAYhD,YAAWC,eAAcK,YAAWF,gBAO/EsJ,aACX1M,YAASgH,GAAiB,CAAChB,aAAYhD,YAAWC,eAAcK,YAAWF,gBAC3EuJ,IACA1M,KAHWyM,CAIZV,K,uECvDUY,GAAY3I,IAAMC,MAAM,YAA2G,IAGxI2I,EAH+BC,EAAwG,EAAxGA,gBAAiBjL,EAAuF,EAAvFA,SAAUD,EAA6E,EAA7EA,YAAamL,EAAgE,EAAhEA,aAAgE,IAAlDC,mBAAkD,MAAtC,GAAsC,EACvIC,GADuI,0FACnHC,KAAKC,KAAKL,EAAkBjL,IAChDuL,EAAuB,GAE3B,IAAKP,EAAI,EAAGA,GAAKI,EAAWJ,IACxBO,EAAMf,KAAKQ,GAEf,IAAIQ,EAAuBH,KAAKC,KAAKF,EAAYD,GAP0F,EAQnG/C,mBAAiB,GARkF,oBAQtIqD,EARsI,KAQvHC,EARuH,KASvIC,GAAkCF,EAAe,GAAKN,EAAc,EACpES,EAAiCH,EAAgBN,EACrD,OAAO,6BACDM,EAAe,GACjB,4BAAQ3H,QAAW,WAAM4H,EAAiBD,EAAgB,KAA1D,QAECF,EACAM,QAAQ,SAAAC,GAAC,OAAGA,GAAIH,GAAyBG,GAAGF,KAC5CxF,KAAI,SAAC0F,EAAEd,GACJ,IAAMe,EAAmBhM,IAAgB+L,EAAIvJ,KAAMyJ,aAAe,GAClE,OAAO,0BAAM1J,UAAWyJ,EAAkB1F,IAAK2E,EAC3ClH,QAAS,WAAQoH,EAAaY,KAAOA,MAG3CN,EAAeC,GACjB,4BAAQ3H,QAAW,WAAM4H,EAAiBD,EAAgB,KAA1D,Y,qBCrBKQ,GAAO7J,IAAMC,MAAK,YAAoE,IAAjE6J,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,oBAAqBC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,SAC3DxC,EAAW,CACbC,gBAAgB,OAAD,OAASC,KAAT,MAGnB,OAAO,yBAAKzH,UAAWC,KAAM2J,KAAM3J,MAAOsH,GAEtC,yBAAKvH,UAAWC,KAAM+J,YAClB,kBAAC,IAAD,CAAS9N,GAAI,YAAc0N,EAAKvN,IAC5B,yBAAK6E,IAA0B,MAArB0I,EAAKvI,OAAOC,MAAgBsI,EAAKvI,OAAOC,MAAQC,OAE9D,6BAAMqI,EAAKK,SACL,4BAAQC,SAAUL,EAAoBM,MAAK,SAAA9N,GAAE,OAAIA,IAAOuN,EAAKvN,MAC3DmF,QAAS,WAAQuI,EAASH,EAAKvN,MADjC,YAEA,4BAAQ6N,SAAUL,EAAoBM,MAAK,SAAA9N,GAAE,OAAIA,IAAOuN,EAAKvN,MAC3DmF,QAAS,WAAQsI,EAAOF,EAAKvN,MAD/B,YAIV,yBAAK2D,UAAWC,KAAMmK,UAClB,4BAAKR,EAAKtN,MACV,yBAAK0D,UAAWC,KAAMoK,MAAOT,EAAK7K,QAClC,6BAAM6K,EAAK7K,aCpBTuL,GAAkB5G,YAAwD,CACpFC,KAAM,UADsBD,EARuF,SAAC,GAAoB,IAAnBN,EAAkB,EAAlBA,aACrH,OACE,0BAAMD,SAAUC,EAAcpD,UAAWC,KAAMsK,YAC7C,kBAAClH,EAAA,EAAD,CAAO/G,KAAK,OAAOgH,UAAWmC,KAAO9I,KAAK,OAAO+I,YAAa,2BAC9D,4BAAQ1F,UAAWC,KAAMuK,cAAc,kBAAC,IAAD,CAAiBlK,KAAMmK,IAAUjK,KAAK,OAA7E,SCSKkK,GAAQ5K,IAAMC,MAAM,YAA2H,IAAzH4K,EAAwH,EAAxHA,MAAOjN,EAAiH,EAAjHA,SAAUkN,EAAuG,EAAvGA,gBAAiBnN,EAAsF,EAAtFA,YAAamL,EAAyE,EAAzEA,aAAciB,EAA2D,EAA3DA,oBAAqBC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,SAEnHxC,EAAW,CACbC,gBAAgB,OAAD,OAASC,KAAT,MAMnB,OAAO,6BACH,yBAAKzH,UAAWC,KAAM4K,cAClB,kBAAClD,GAAA,EAAD,CAAkBJ,UAAWA,EAAWK,MAAM,WAElD,kBAAC0C,GAAD,CAAiBnH,SARF,SAAC9D,GAEhByL,MAAOzL,EAAS0L,SAOhB,kBAACtC,GAAD,CAAWE,gBAAiBiC,EAAiBlN,SAAUA,EAAUD,YAAaA,EAAamL,aAAcA,EAAcC,YAAa,KACrI,yBAAK7I,UAAWC,KAAM0K,OACrBA,EAAM7G,KAAI,SAAAkH,GAAC,OAAI,kBAACrB,GAAD,CAAM5F,IAAKiH,EAAE3O,GAAIuN,KAAMoB,EAAGnB,oBAAqBA,EAAqBC,OAAQA,EAAQC,SAAUA,YChCjH5N,GAAe,CACfwO,MAAO,GACPjN,SAAU,GACVkN,gBAAgB,EAChBnN,YAAa,EACbwN,YAAY,EACZpB,oBAAqB,CAAC,EAAE,IAwEfqB,GAAiB,SAACzN,GAAD,MAAyB,CAACd,KAAMC,IAAauO,eAAgB1N,gBAE9E2N,GAAmB,SAACH,GAAD,MAA0B,CAACtO,KAAMC,IAAayO,iBAAkBJ,eACnFK,GAA4B,SAACL,EAAqBpN,GAAtB,MAAyC,CAAClB,KAAMC,IAAa2O,0BAA2BN,aAAYpN,WAGhIL,GAAW,SAACC,EAAqBC,GAAtB,8CACpB,WAAOgC,GAAP,eAAAoC,EAAA,sEAEQpC,EAAS0L,IAAiB,IAC1B1L,EAASwL,GAAezN,IAHhC,SAI6BF,IAAQC,SAASC,EAAaC,GAJ3D,OAIYqE,EAJZ,OAKQrC,EAAS0L,IAAiB,IAC1B1L,GAdaiL,EAcK5I,EAASC,KAAKwJ,MAdS,CAAC7O,KAAMC,IAAa6O,SAAUd,WAevEjL,GAbuBkL,EAaK7I,EAASC,KAAK0J,WAbU,CAAC/O,KAAMC,IAAa+O,mBAAoBf,qBAMpG,kDASQpL,YAAyB,EAAD,GAAQE,GATxC,kCAN8B,IAACkL,EAFVD,IAQrB,qBADoB,uDAcXb,GAAS,SAACjM,GAAD,8CAClB,WAAO6B,GAAP,SAAAoC,EAAA,sEAEQpC,EAAS4L,IAA0B,EAAMzN,IAFjD,SAG6BN,IAAQK,eAAeC,GAHpD,OAIiD,IAJjD,OAI6BmE,KAAKE,YACdxC,GA7BMkM,EA6BiB/N,EA7BK,CAAClB,KAAMC,IAAaiP,OAAQD,cA+B5DlM,EAAS4L,IAA0B,EAAOzN,IAP1D,gDASQ2B,YAAyB,EAAD,GAAQE,GATxC,kCAxByB,IAACkM,IAwB1B,oBADkB,uDAcT7B,GAAW,SAAClM,GAAD,8CACpB,WAAO6B,GAAP,SAAAoC,EAAA,sEAEQpC,EAAS4L,IAA0B,EAAMzN,IAFjD,SAG6BN,IAAQQ,iBAAiBF,GAHtD,OAIiD,IAJjD,OAI6BmE,KAAKE,YACdxC,GA1CQkM,EA0CiB/N,EA1CM,CAAClB,KAAMC,IAAakP,SAAUF,cA4CjElM,EAAS4L,IAA0B,EAAOzN,IAP1D,gDASQ2B,YAAyB,EAAD,GAAQE,GATxC,kCArC2B,IAACkM,IAqC5B,oBADoB,uD,UC9GXG,GAAwBC,cAHZ,SAACtQ,GACtB,OAAOA,EAAMuQ,UAAUtB,SAE4C,SAACA,GACpE,OAAOA,EAAMpB,QAAQ,SAAAyB,GAAC,OAAI,QAEjBkB,GAAsB,SAACxQ,GAChC,OAAQA,EAAMuQ,UAAUvO,UAEfyO,GAA6B,SAACzQ,GACvC,OAAOA,EAAMuQ,UAAUrB,iBAEdwB,GAAyB,SAAC1Q,GACnC,OAAOA,EAAMuQ,UAAUxO,aAEd4O,GAAwB,SAAC3Q,GAClC,OAAOA,EAAMuQ,UAAUhB,YAEdqB,GAAiC,SAAC5Q,GAC3C,OAAOA,EAAMuQ,UAAUpC,qBCfd0C,GAAb,4MACIpE,kBAAoB,WAChB,EAAKnM,MAAMwB,SAAS,EAAKxB,MAAMyB,YAAa,EAAKzB,MAAM0B,WAF/D,EAIA8O,aAAe,SAACC,GACZ,EAAKzQ,MAAMwB,SAASiP,EAAY,EAAKzQ,MAAM0B,WAL/C,EAOAiF,OAAS,WACL,OAAO,6BAEF,EAAK3G,MAAMiP,WAAa,kBAAC3G,GAAD,MAAe,KAExC,kBAACoG,GAAD,CACJC,MAAQ,EAAK3O,MAAM2O,MACnBjN,SAAW,EAAK1B,MAAM0B,SACtBkN,gBAAkB,EAAK5O,MAAM4O,gBAC7BnN,YAAc,EAAKzB,MAAMyB,YACzBmL,aAAc,EAAK4D,aACnB3C,oBAAsB,EAAK7N,MAAM6N,oBACjCC,OAAQ,EAAK9N,MAAM8N,OACnBC,SAAU,EAAK/N,MAAM+N,aApBzB,YAAoCjK,IAAM8C,eA0BtCC,GAAkB,SAACnH,GACnB,MAAO,CACHiP,MAAOoB,GAAuBrQ,GAC9BgC,SAAUwO,GAAoBxQ,GAC9BkP,gBAAiBuB,GAA2BzQ,GAC5C+B,YAAa2O,GAAuB1Q,GACpCuP,WAAYoB,GAAsB3Q,GAClCmO,oBAAqByC,GAA+B5Q,KAQ7CG,IAJGA,YAAQgH,GAAkB,CAAGrF,YAAUsM,UAAQC,cAIlDlO,YAASgH,GACpB,CAAErF,YAAUsM,UAAQC,aADTlO,CAET0Q,K,0CCrCOG,GAAa5M,IAAMC,MAAK,YAA2E,IAAxE6J,EAAuE,EAAvEA,KAAMC,EAAiE,EAAjEA,oBAAqBC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,SAEvE,OAAO,yBAAK/J,UAAWC,KAAM0M,YACzB,yBAAK3M,UAAWC,KAAM2M,kBAClB,kBAAC,IAAD,CAAS1Q,GAAI,YAAc0N,EAAKvN,IAC5B,yBAAK6E,IAA0B,MAArB0I,EAAKvI,OAAOC,MAAgBsI,EAAKvI,OAAOC,MAAQC,QAIlE,yBAAKvB,UAAWC,KAAM4M,gBACjBjD,EAAKtN,KACN,6BAAMsN,EAAKK,SACL,4BAAQC,SAAUL,EAAoBM,MAAK,SAAA9N,GAAE,OAAIA,IAAOuN,EAAKvN,MAC3DmF,QAAS,WAAQuI,EAASH,EAAKvN,MADjC,YAEA,4BAAQ6N,SAAUL,EAAoBM,MAAK,SAAA9N,GAAE,OAAIA,IAAOuN,EAAKvN,MAC3DmF,QAAS,WAAQsI,EAAOF,EAAKvN,MAD/B,UAHN,UCPCyQ,GAAWhN,IAAMC,MAAM,YAA8H,IAA5H4K,EAA2H,EAA3HA,MAA6Dd,GAA8D,EAApHnM,SAAoH,EAA1GkN,gBAA0G,EAAzFnN,YAAyF,EAA5EmL,aAA4E,EAA9DiB,qBAAqBC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,SAE9H,OACI,yBAAK/J,UAAWC,KAAM8M,UACtBpC,EACApB,QAAO,SAAAyB,GAAC,OAAIA,EAAEf,YACdnG,KAAI,SAAAkH,GAAC,OAAI,kBAAC0B,GAAD,CAAY3I,IAAKiH,EAAE3O,GAAIuN,KAAMoB,EAAGnB,oBAAqBA,EAAqBC,OAAQA,EAAQC,SAAUA,WCbtGiD,GAAb,4MACE7E,kBAAoB,WAChB,EAAKnM,MAAMwB,SAAS,EAAKxB,MAAMyB,YAAa,EAAKzB,MAAM0B,WAF7D,EAIA8O,aAAe,SAACC,GACd,EAAKzQ,MAAMwB,SAASiP,EAAY,EAAKzQ,MAAM0B,WAL7C,EAOAiF,OAAS,WACP,OAAO,6BAEF,EAAK3G,MAAMiP,WAAa,kBAAC3G,GAAD,MAAe,KAExC,kBAACwI,GAAD,CACJnC,MAAQ,EAAK3O,MAAM2O,MACnBjN,SAAW,EAAK1B,MAAM0B,SACtBkN,gBAAkB,EAAK5O,MAAM4O,gBAC7BnN,YAAc,EAAKzB,MAAMyB,YACzBmL,aAAc,EAAK4D,aACnB3C,oBAAsB,EAAK7N,MAAM6N,oBACjCC,OAAQ,EAAK9N,MAAM8N,OACnBC,SAAU,EAAK/N,MAAM+N,aApBvB,YAAuCjK,IAAM8C,eA0BzCC,GAAkB,SAACnH,GACrB,MAAO,CACHiP,MAAOoB,GAAuBrQ,GAC9BgC,SAAUwO,GAAoBxQ,GAC9BkP,gBAAiBuB,GAA2BzQ,GAC5C+B,YAAa2O,GAAuB1Q,GACpCuP,WAAYoB,GAAsB3Q,GAClCmO,oBAAqByC,GAA+B5Q,KAQ3CG,IAJGA,YAAQgH,GAAkB,CAAGrF,YAAUsM,UAAQC,cAIlDlO,YAASgH,GACtB,CAAErF,YAAUsM,UAAQC,aADPlO,CAEXmR,K,uCC3CAC,GAAWC,aACX,CACIpK,Y1BGsB,WAAiE,IAAhEpH,EAA+D,uDAAxDS,EAAcO,EAA0C,uCAE1F,OAAQA,EAAOC,MACX,KAAKC,IAAayH,SACd,IAAI8I,EAAazQ,EAAOwH,QACxB,OAAO,2BACAxI,GADP,IAEI+F,MAAM,GAAD,mBAAM/F,EAAM+F,OAAZ,CAAmB,CAAEpF,GAAI,EAAGqF,WAAY,EAAG9B,QAASuN,OAGjE,KAAKvQ,IAAawQ,YACd,OAAO,2BACA1R,GADP,IAEI+F,MAAO/F,EAAM+F,MAAM8H,QAAO,SAAAC,GAAC,OAAIA,EAAEnN,KAAOK,EAAO2Q,YAEvD,KAAKzQ,IAAaqF,iBACd,IAAIqL,EAAS,eAAQ5R,GAErB,OADA4R,EAAUpO,QAAUxC,EAAOwC,QACpBoO,EAEX,KAAK1Q,IAAagF,WACd,IAAI0L,EAAS,eAAQ5R,GAErB,OADA4R,EAAUvO,OAASrC,EAAOqC,OACnBuO,EAEX,KAAK1Q,IAAawF,mBACd,OAAO,2BAAK1G,GAAZ,IACIwD,QAAQ,2BAAKxD,EAAMwD,SAAZ,IACPmC,OAAQ3E,EAAO2E,WAIvB,QAAS,OAAO3F,I0BlChB6R,YAAa9Q,KACbwP,UNDoB,WAAiE,IAAhEvQ,EAA+D,uDAAxDS,GAAcO,EAA0C,uCAExF,OAAQA,EAAOC,MACX,KAAKC,IAAaiP,OAEd,IAAIyB,EAAS,2BACN5R,GADM,IAETiP,MAAOjP,EAAMiP,MAAM7G,KAAK,SAAAkH,GACpB,OAAIA,EAAE3O,KAAOK,EAAOkP,SACT,2BAAKZ,GAAZ,IAAef,UAAU,IAEbe,OAGxB,OAAOsC,EAEX,KAAK1Q,IAAakP,SACd,IAAIwB,EAAS,2BACN5R,GADM,IAETiP,MAAOjP,EAAMiP,MAAM7G,KAAI,SAAAkH,GACnB,OAAIA,EAAE3O,KAAOK,EAAOkP,SACT,2BACAZ,GADP,IACUf,UAAU,IAERe,OAGxB,OAAOsC,EAEX,KAAK1Q,IAAa6O,SACd,IAAI6B,EAAS,2BACN5R,GADM,IAETiP,MAAOjO,EAAOiO,QAElB,OAAO2C,EAEX,KAAK1Q,IAAauO,eACd,IAAImC,EAAS,2BACN5R,GADM,IAEb+B,YAAaf,EAAOe,cACpB,OAAO6P,EAEX,KAAK1Q,IAAa+O,mBACd,IAAI2B,EAAS,2BACN5R,GADM,IAEbkP,gBAAiBlO,EAAOkO,kBACxB,OAAO0C,EAEX,KAAK1Q,IAAayO,iBACd,IAAIiC,EAAS,2BACN5R,GADM,IAEbuP,WAAYvO,EAAOuO,aACnB,OAAOqC,EAEX,KAAK1Q,IAAa2O,0BACd,IAAI+B,EAAS,2BACN5R,GADM,IAETmO,oBAAqBnN,EAAOuO,WAAP,sBACfvP,EAAMmO,qBADS,CACYnN,EAAOmB,SACtCnC,EAAMmO,oBAAoBN,QAAO,SAAAlN,GAAE,OAAEA,GAAMK,EAAOmB,YAExD,OAAOyP,EAEX,QAAS,OAAO5R,IM7DhBE,KAAM4R,IACN7J,KAAM8J,KACNC,IAAKC,OAYPC,GAAmBC,OAAOC,sCAAwCvF,KAC3DwF,GAAQC,aAAYf,GAAUW,GACvCK,aAAgBC,QC3Bb,SAASC,GAAaC,GACzB,OAAO,SAACpS,GACJ,OAAO,kBAAC,WAAD,CAAUqS,SAAU,kBAAC/J,GAAD,OACvB,kBAAC8J,EAAcpS,K,wBCA3B,SAASsS,GAAMtS,GACb,OAAO,kBAAC,KAAD,eAAUuS,UAAW,EAAGC,QAAQ,UAAaxS,IAI/C,SAASyS,KACZ,IAAMhP,EAASiP,aAAyC,SAAAhT,GAAK,OAAIA,EAAMgS,IAAIjO,SACrEC,EAAWiP,cAGjBC,EAAmB,OAAVnP,EAEHoP,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJrP,EAASC,aAAW,QAG1B,OACI,kBAACqP,GAAA,EAAD,CAAUC,KAAML,EAAQM,iBAAkB,IAAMC,QAASN,GACvD,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,SACnC3P,ICVX,IAAM4P,GAAmBvP,IAAMwP,MAAK,kBAAM,iCACpCC,GAAWzP,IAAMwP,MAAK,kBAAM,iCAC5BE,GAAO1P,IAAMwP,MAAK,kBAAM,iCACxBG,GAAQ3P,IAAMwP,MAAK,kBAAM,iCACzBI,GAAQ5P,IAAMwP,MAAK,kBAAM,iCACzBK,GAAW7P,IAAMwP,MAAK,kBAAM,iCAErBM,GAAb,4MACEzH,kBAAoB,WAClB,EAAKnM,MAAM6T,iBAFf,EAIElN,OAAS,WACP,OAAK,EAAK3G,MAAM8T,cAId,yBAAK9P,UAAU,eAEb,kBAAC,EAAD,MACA,yBAAKA,UAAU,YACf,kBAACyO,GAAD,MACE,kBAAC5O,EAAD,MACA,kBAAC,GAAD,MACA,yBAAKG,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+P,OAAK,EAAC1J,KAAK,IAAI1D,OAAQ,kBAAM,kBAAC,IAAD,CAAUzG,GAAI,gBAClD,kBAAC,IAAD,CAAOmK,KAAK,oBAAoB1D,OAAQ,kBAAM,kBAAC,GAAD,SAC9C,kBAAC,IAAD,CAAO0D,KAAK,WAAW1D,OAAQwL,GAAakB,MAC5C,kBAAC,IAAD,CAAOhJ,KAAK,SAAS1D,OAAQ,kBAAM,kBAAC,GAAD,SACnC,kBAAC,IAAD,CAAO0D,KAAK,SAAS1D,OAAQwL,GAAasB,MAC1C,kBAAC,IAAD,CAAOpJ,KAAK,YAAY1D,OAAQwL,GAAaoB,MAC7C,kBAAC,IAAD,CAAOlJ,KAAK,SAAS1D,OAAQwL,GAAauB,MAC1C,kBAAC,IAAD,CAAOrJ,KAAK,QAAQ1D,OAAQwL,GAAaqB,MACzC,kBAAC,IAAD,CAAOnJ,KAAK,QAAQ1D,OAAQwL,GAAawB,MACzC,kBAAC,IAAD,CAAOtJ,KAAK,IAAI1D,OAAQ,kBAAM,qDArB/B,kBAAC2B,GAAD,OANb,YAAyBxE,IAAM8C,eAoC3BC,GAAkB,SAACnH,GACrB,MAAO,CACLoU,cAAepU,EAAMgS,IAAIoC,gBASzBE,IANcnU,YAAQgH,GAAkB,CAACgN,qBAMzBtH,aAClB1M,YAAQgH,GAAiB,CAACgN,qBAC1BrH,IAFkBD,CAGlBqH,KAGWK,GAAUnQ,IAAMC,MAAK,WAChC,OAAO,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAUgO,MAAOA,IACf,kBAACiC,GAAD,WCtEcE,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASrI,MACvB,2DCXNsI,IAAS1N,OAAQ,kBAACsN,GAAD,MAAaK,SAASC,eAAe,SDoIhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzK,MAAK,SAAA0K,GACJA,EAAaC,gBAEdC,OAAM,SAAApR,GACLqR,QAAQrR,MAAMA,EAAMG,a,wLE7IxBzD,EAAiC,CACjC2T,eAAe,EACfrQ,MAAO,MAGEkO,EAAa,WAAiE,IAAhEjS,EAA+D,uDAAxDS,EAAcO,EAA0C,uCAEtF,OAAQA,EAAOC,MAEX,KAAKC,IAAamU,sBACd,OAAO,2BAAKrV,GAAZ,IACIoU,eAAe,IAGvB,KAAKlT,IAAaoU,UACd,OAAO,2BAAKtV,GAAZ,IACI+D,MAAO/C,EAAO+C,QAGtB,QAAS,OAAO/D,IAKXiE,EAAa,SAACF,GAAD,MAA2B,CAAE9C,KAAMC,IAAaoU,UAAWvR,UAGxEoQ,EAAgB,yDAAM,WAAOnQ,GAAP,eAAAoC,EAAA,6DAC3BmP,EAAUvR,EAASwR,eADQ,SAEV1O,QAAQ2O,IAAK,CAACF,IAFJ,cAG3BvR,EAPqC,CAAE/C,KAAMC,IAAamU,wBAI/B,2CAAN,wD,mBC9B7B7V,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,UAAY,+BAA+B,iBAAmB,sCAAsC,KAAO,0BAA0B,WAAa,gCAAgC,aAAe,kCAAkC,cAAgB,qC,iJCOhViW,EAA8C,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAErDC,EAAWF,EAAKG,SAAWH,EAAK5R,MAEtC,OACA,oCACE,yBAAKO,UAAWC,IAAMwR,YAAc,KAAOF,EAAWtR,IAAMR,MAAO,KAChE6R,GAEFC,GAAY,0BAAMvR,UAAWC,IAAMyR,WAAcL,EAAK5R,SAMpD,SAAS8D,EAAUvH,GAAa,IAC9B2V,EAAuC3V,EAAvC2V,MAA0B1V,GAAaD,EAAhCqV,KAAgCrV,EAA1BsV,SADgB,YACUtV,EADV,8BAEpC,OAAO,kBAACoV,EAAgBpV,EAAjB,IAAyB,8CAAc2V,EAAW1V,KAGpD,SAASwJ,EAAOzJ,GAAa,IAC3B2V,EAAuC3V,EAAvC2V,MAA0B1V,GAAaD,EAAhCqV,KAAgCrV,EAA1BsV,SADa,YACatV,EADb,8BAEjC,OAAO,kBAACoV,EAAgBpV,EAAjB,IAAyB,2CAAW2V,EAAW1V,EAAtB,CAAiC+D,UAAWC,IAAM2R,gB,mBC7BpF1W,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,UAAY,0BAA0B,WAAa,6B,mBCAjID,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,SAAW,wBAAwB,WAAa,4B,0OCKtHgB,EAAiC,CACjCE,GAAI,KACJ+B,MAAO,KACRD,MAAO,QACPxC,QAAQ,EACRkW,WAAY,MAGFrE,EAAc,WAAiE,IAAhE9R,EAA+D,uDAAxDS,EAAcO,EAA0C,uCAEvF,OAAQA,EAAOC,MAEX,KAAKC,IAAakV,cACf,IAAIxE,EAAS,2BAAQ5R,GACrBgB,EAAOsF,MAEP,OAAOsL,EAEV,KAAK1Q,IAAamV,wBACd,OAAO,2BACArW,GADP,IAEImW,WAAYnV,EAAOmV,aAG3B,QAAS,OAAOnW,IAIXsW,EAAc,SAAE3V,EAAmB+B,EAAqBD,EAAsBxC,GAAhE,MAAqF,CAACgB,KAAMC,IAAakV,cAAe9P,KAAM,CAAC3F,KAAI+B,QAAOD,QAAOxC,YAC/JsW,EAAuB,SAAEJ,GAAF,MAAiC,CAAClV,KAAMC,IAAamV,wBAAyBF,eAErGX,EAAQ,yDAAM,WAAOxR,GAAP,uBAAAoC,EAAA,+EAEE7D,IAAQC,YAFV,OAGc,KAD7B6D,EAFe,QAGNC,KAAKE,aAAmB,EACEH,EAASC,KAAKA,KAA3C3F,EAD0B,EAC1BA,GAAI+B,EADsB,EACtBA,MAAOD,EADe,EACfA,MADe,EACRxC,OACxB+D,EAASsS,EAAY3V,EAAI+B,EAAOD,GAAO,KALxB,gDAQnBqB,YAAyB,EAAD,GAAQE,GARb,yDAAN,uDAYRvB,EAAQ,SAACC,EAAeC,EAAkBC,EAAqBC,GAAvD,8CACjB,WAAOmB,GAAP,iBAAAoC,EAAA,+EAE6B7D,IAAQE,MAAMC,EAAOC,EAAUC,EAAYC,GAFxE,OAGyC,KAD7BwD,EAFZ,QAGqBC,KAAKE,WACdxC,EAASwR,MAEwB,KAA7BnP,EAASC,KAAKE,YACdxC,EAAShB,KAETkB,EAAUmC,EAASC,KAAKzF,SAASf,OAAS,EAAIuG,EAASC,KAAKzF,SAAS,GAAK,aAC9EmD,EAAS4C,YAAW,QAAS,CAAEC,OAAQ3C,MAVnD,gDAaQJ,YAAyB,EAAD,GAAQE,GAbxC,yDADiB,uDAkBRlB,EAAS,yDAClB,WAAOkB,GAAP,SAAAoC,EAAA,+EAE+B7D,IAAQO,SAFvC,OAGyC,IAHzC,OAGqBwD,KAAKE,YACdxC,EAASsS,EAAY,KAAM,KAAM,MAAM,IAJnD,gDAOQxS,YAAyB,EAAD,GAAQE,GAPxC,yDADkB,uDAYThB,EAAgB,yDACzB,WAAOgB,GAAP,iBAAAoC,EAAA,+EAE+BrD,IAAYC,gBAF3C,OAEcqD,EAFd,OAGc8P,EAAa9P,EAASC,KAAKoE,IACjC1G,EAASuS,EAAqBJ,IAJtC,gDAMQrS,YAAyB,EAAD,GAAQE,GANxC,yDADyB,wD,+BC/EtB,IAAK9C,EAAZ,kC,SAAYA,K,gEAAAA,E,wCAAAA,E,iDAAAA,E,qEAAAA,E,kDAAAA,E,oCAAAA,E,yCAAAA,E,0CAAAA,E,uDAAAA,E,gEAAAA,E,2DAAAA,E,8EAAAA,E,0CAAAA,E,0DAAAA,E,8CAAAA,E,gDAAAA,E,+DAAAA,M,yBCAZ1B,EAAOC,QAAU,IAA0B,qL,gCCA3C,wEAGawM,EAAmB7H,IAAMC,MAAM,SAAC/D,GAE3C,OAAO,6BACT,yBAAKgE,UAAWC,IAAMiS,iBAAkBjS,MAAOjE,EAAMuL,YACrD,yBAAKvH,UAAWC,IAAMkS,cACN,yBAAKnS,UAAWC,IAAMmS,mBAClB,4BAAKpW,EAAM4L,e","file":"static/js/main.b3fb594e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainImageWrapper\":\"MainImageWrapper_mainImageWrapper__WaUaz\",\"titleOnImage\":\"MainImageWrapper_titleOnImage__3Z_IA\",\"titleOnImageBlock\":\"MainImageWrapper_titleOnImageBlock__3uHg4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"followUser\":\"FollowUser_followUser__3Onz9\",\"followUserAvatar\":\"FollowUser_followUserAvatar__3ihOP\",\"followUserBody\":\"FollowUser_followUserBody__1LoEA\"};","export const required = (value: string) => {\n    if (value) return undefined\n    return \"Field is required!\"\n}\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbols!`\n        return undefined\n    }\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__lVmTd\",\"posts\":\"MyPosts_posts__1LOLx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBur\":\"NavBar_navBur__qBdd1\",\"item\":\"NavBar_item__3hndL\",\"active\":\"NavBar_active__1noJp\",\"icon\":\"NavBar_icon__1nCV0\"};","module.exports = __webpack_public_path__ + \"static/media/lamp.f8840ecc.jpg\";","import { AppStateType } from '../redux/StoreRedux';\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => {\r\n    return { \r\n        isAuth: state.auth.isAuth        \r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToPropsForRedirect, {})  \r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>)  {\r\n\r\n    function RedirectComponent (props: PropsFromRedux){  \r\n        let {isAuth, ...restProps} = props\r\n            if (!isAuth) return  <Redirect to =\"/login\" />    \r\n            return <WrappedComponent {...restProps as WCP} />        \r\n    }\r\n    let ConnectedRedirectComponent = connect<PropsFromRedux>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n    return  ConnectedRedirectComponent\r\n}\r\n\r\n\r\n","import {ACTIONS_TYPE} from \"./enumActionsType\"\n\nlet initialState  = {\n    dialogs: [\n        { id: 1, name: \"Ann\" },\n        { id: 2, name: \"Andy\" },\n        { id: 3, name: \"Mike\" }\n    ] as Array<DialogArrayType>,\n    messages: [\n        { id: 1, textMessage: \"Hi\" },\n        { id: 2, textMessage: \"Hello\" },\n        { id: 3, textMessage: \"How are you\" }\n    ] as Array<MessagesType>  \n}\n\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SEND_MESSAGE: {\n            let bodyMessage = action.newMessage\n            return {\n                ...state,\n                messages: [...state.messages, {id:6, textMessage:bodyMessage}]\n            }\n        }         \n    \n        default: return state\n    }    \n}\nexport const sendMessageActionCreator = (newMessage: any) => ({type: ACTIONS_TYPE.SEND_MESSAGE, newMessage} as const)\n\n//types\ntype ActionsType = ReturnType<typeof sendMessageActionCreator> \n\nexport type InitialStateType = typeof initialState\n\nexport type MessagesType = {\n    id: number\n    textMessage: string\n}\n\nexport type DialogArrayType = {\n    id: number\n    name: string\n}","module.exports = __webpack_public_path__ + \"static/media/Голубой Круг Бизнес Логотип (5).f26c1188.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2kuT-\"};","module.exports = __webpack_public_path__ + \"static/media/Rolling-1s-200px.ea05abc7.svg\";","module.exports = __webpack_public_path__ + \"static/media/darkBlueSpider.c1ca6854.png\";","module.exports = __webpack_public_path__ + \"static/media/houses.fdb77550.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__1EgRb\"};","module.exports = __webpack_public_path__ + \"static/media/666.2ff70a1b.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rightBur\":\"RightBar_rightBur__1Htou\"};","import Axios from \"axios\"\r\nimport {ProfileType} from \"../redux/ProfileReducer\"\r\n\r\nconst instance = Axios.create ({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n     withCredentials: true,\r\n     headers: {\"API-KEY\": \"e9273c8b-70eb-4960-b897-692d970ce8cd\"}\r\n})\r\n\r\nexport const UserAPI = {\r\n    getUsers (currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}& count=${pageSize}`)\r\n    },\r\n    postUserFollow (userId: number) {\r\n        return instance.post(`follow/` + userId, {})\r\n    },\r\n    deleteUserFollow (userId: number) {\r\n        return instance.delete(`follow/`+ userId)\r\n    },\r\n}\r\n\r\nexport const AuthAPI = {\r\n    getAuthMe () {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login (email: string, password:string, rememberMe: boolean, captcha: string) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout () {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const SecurityAPI = {\r\n    getCaptchaUrl () {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }    \r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUserProfile (userId:number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus (userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus (status: string) {\r\n        return instance.put(`profile/status`, {status} )\r\n    },\r\n    saveProfile(profile: any) {\r\n        return instance.put(`profile/`, profile )\r\n    },\r\n    savePhoto (photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\" : \"multipart/form-data\"\r\n            }\r\n        } )\r\n    },\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { setErrorAC, SetErrorActionType} from \"../redux/AppReducer\"\r\n\r\n export const handleServerAppError = <D> (data: any, dispatch: Dispatch <SetErrorActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setErrorAC(\"Some error occurred\"))\r\n    }\r\n}                \r\n  \r\n\r\n export const handleServerNetworkError = (error: any, dispatch: Dispatch <SetErrorActionType>) => {\r\n    dispatch(setErrorAC(error.message ? error.message : \"Some error\"))\r\n }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContant\":\"Profile_profileContant__1_c1O\",\"ava\":\"Profile_ava__2CzVK\",\"profileInfo\":\"Profile_profileInfo__29nHf\",\"profileBur\":\"Profile_profileBur__oZISB\",\"item\":\"Profile_item__1sRZa\",\"active\":\"Profile_active__2Kzop\"};","import React from \"react\"\nimport style from \"./NavBar.module.css\"\nimport { NavLink } from \"react-router-dom\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\"\nimport { faPlayCircle } from \"@fortawesome/free-solid-svg-icons\"\nimport { faRss } from \"@fortawesome/free-solid-svg-icons\"\nimport { faCommentDots } from \"@fortawesome/free-solid-svg-icons\"\nimport { faUsers } from \"@fortawesome/free-solid-svg-icons\"\nimport { faAddressCard } from \"@fortawesome/free-solid-svg-icons\"\n\n\nexport const NavBar = React.memo(() => {\n  return (\n    <nav className={style.navBur}>\n      <div className={style.item}>\n        <NavLink to=\"/profile\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faAddressCard} size=\"1x\" />Profile</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to=\"/dialogs\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faCommentDots} size=\"1x\" />Dialogs</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to=\"/users\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faUsers} size=\"1x\" />Users</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to=\"/music\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faPlayCircle} size=\"1x\" />Music</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to=\"/news\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faRss} size=\"1x\" />News</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to=\"/settings\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faCog} size=\"1x\" />Settings</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to=\"/chat\" activeClassName={style.active}>\n          <FontAwesomeIcon className={style.icon} icon={faCog} size=\"1x\" />Chat</NavLink>\n      </div>\n    </nav>\n  )\n}\n)","import React from \"react\"\nimport style from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faConnectdevelop} from \"@fortawesome/free-brands-svg-icons\"\nimport { faSearch} from \"@fortawesome/free-solid-svg-icons\"\nimport logo from \"../../assets/image/Голубой Круг Бизнес Логотип (5).png\"\nimport { profile } from \"console\"\nimport userPhoto from \"../../assets/image/Голубой Круг Бизнес Логотип (3).png\"\nimport { SearchReduxForm, SearchFormValuesType } from \"../Users/SearchForm\"\n\nexport const Header = React.memo ((props: {login: string | null; isAuth: boolean; logout: any; profile: any}) => {\n  \n    return (\n    <div className={style.header}>\n      <div className={style.logo}>\n        <a href=\"\">\n        <img src={logo} />\n          <span>Social Network</span>\n        </a>\n      </div>\n\n      <div className={style.searchBur}>\n       \n        </div>\n\n        <div className={style.loginBlock}>\n          {props.profile.photos != null &&\n            <img src={props.profile.photos.small || userPhoto} />\n          }\n\n        {props.isAuth\n          ? <div>{props.login}  <button onClick={props.logout}>Logout</button> </div>\n          : <NavLink to=\"/login\" activeClassName={style.active}>Login</NavLink>\n        }\n      </div>\n    </div>\n  )}\n)\n","import {ProfileAPI} from \"../api/api\"\nimport {ACTIONS_TYPE} from \"./enumActionsType\"\nimport { handleServerAppError,  handleServerNetworkError} from \"../util/errorUtils\"\nimport {stopSubmit} from \"redux-form\"\n\nlet initialState = {\n    posts: [\n        { id: 1, message: \"It is my first post\", likesCount: 0 },\n        { id: 2, message: \"Hi\", likesCount: 4 },\n        { id: 3, message: \"Hello\", likesCount: 5 }\n    ] as Array<PostsType>,\n    profile: {},\n    status: \"\"\n}\n\nexport const profileReducer = (state= initialState, action: ActionsType): InitialStateType => {\n    \n    switch (action.type) {\n        case ACTIONS_TYPE.ADD_POST: {\n            let newPstBody = action.newPost\n            return {\n                ...state,\n                posts: [...state.posts, { id: 7, likesCount: 5, message: newPstBody }]\n            }\n        }\n        case ACTIONS_TYPE.REMOVE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId)\n            }\n        case ACTIONS_TYPE.SET_USER_PROFILE: {\n            let stateCopy = { ...state }\n            stateCopy.profile = action.profile\n            return stateCopy\n        }\n        case ACTIONS_TYPE.SET_STATUS: {\n            let stateCopy = { ...state }\n            stateCopy.status = action.status\n            return stateCopy\n        }\n        case ACTIONS_TYPE.SAVE_PHOTO_SUCCESS: {\n            return { ...state,\n                profile: {...state.profile,\n                photos: action.photos }\n             }\n            \n        }\n        default: return state\n    }\n}\nexport const addPost = (newPost: any) => ({type: ACTIONS_TYPE.ADD_POST, newPost} as const)\nexport const setUserProfile = (profile: any) => ({type: ACTIONS_TYPE.SET_USER_PROFILE, profile } as const)\nexport const setStatus = (status: string) => ({type: ACTIONS_TYPE.SET_STATUS, status } as const)\nexport const removePost = (postId: number) => ({type: ACTIONS_TYPE.REMOVE_POST, postId} as const)\nexport const savePhotoSuccess = (photos: any) => ({type: ACTIONS_TYPE.SAVE_PHOTO_SUCCESS, photos} as const)\n\nexport const getProfile = (userId: number) => \nasync (dispatch: any) => {     \n    try {\n        let response = await ProfileAPI.getUserProfile(userId)           \n        dispatch(setUserProfile(response.data)) \n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    }       \n}\n\nexport const getStatus = (userId: number) => \nasync (dispatch: any) => {    \n    try {\n        let response = await ProfileAPI.getStatus(userId)           \n        dispatch(setStatus(response.data)) \n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    }       \n}\n\nexport const updateStatus = (status: string) => \n    async (dispatch: any) => {\n        try {\n            let response = await ProfileAPI.updateStatus(status)\n            if (response.data.resultCode === 0) {\n                dispatch(setStatus(status))\n            }\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }    \n}\n\nexport const savePhoto = (file: any) =>\n    async (dispatch: any) => {\n        try {\n            let response = await ProfileAPI.savePhoto(file)\n            if (response.data.resultCode === 0) {\n                dispatch(savePhotoSuccess(response.data.data.photos))\n            }\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }\n    }\n\nexport const saveProfile = (profile: ProfileType) => \n\nasync (dispatch: any, getState: any) => {  \n    debugger\n    let  userId = getState().auth.id\n    try {\n        let response = await ProfileAPI.saveProfile(profile)             \n        if (response.data.resultCode === 0){\n            dispatch(getProfile (userId))         \n        } else {           \n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n            dispatch(stopSubmit('profileDataForm', { _error: message }))\n            return Promise.reject(response.data.messages[0] )\n        }     \n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    }            \n}\n\n//types\nexport type InitialStateType = typeof initialState\n\nexport type ActionsType = \n| ReturnType<typeof addPost> \n| ReturnType<typeof setUserProfile> \n| ReturnType<typeof setStatus> \n| ReturnType<typeof removePost>\n| ReturnType<typeof savePhotoSuccess>\n\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nexport type ProfileType = {\n    userId: number\nlookingForAJob: boolean\nlookingForAJobDescription: string\nfullName: string\naboutMe: string\ncontacts: ContactsType\nphotos: PhotosType\n}\n\nexport type ContactsType ={\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype PhotosType = {\n    small: string\n    large: string\n}\n","import React from \"react\"\nimport {Header} from \"./Header\"\nimport {logout} from \"../../redux/AuthReducer\"\nimport {connect, ConnectedProps} from \"react-redux\"\nimport {AppStateType} from \"../../redux/StoreRedux\"\nimport style from \"./Header.module.css\"\nimport {getProfile} from \"../../redux/ProfileReducer\"\n\n\nexport class HeaderContainer extends React.PureComponent<PropsFromRedux> {  \nrender = () => {\n    return <div className={style.header}>        \n        <Header {...this.props} profile={this.props.profile}/>      \n    </div>\n}\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        login: state.auth.login,\n        isAuth: state.auth.isAuth,\n        profile: state.profilePage.profile, \n        authorizedUserId: state.auth.id\n    }\n}  \n  const connector = connect(mapStateToProps , {logout, getProfile})\n  \n  type PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connect(mapStateToProps, {logout, getProfile} ) (HeaderContainer)\n","import React from \"react\"\nimport style from \"./Post.module.css\"\n\ntype PostPropsType = {\n    message:string\n    likesCount: number\n    id: number\n}\n\nexport const Post = React.memo ((props: PostPropsType) => {\n  return (\n      <div className={style.post}>\n        <img src=\"https://pbs.twimg.com/media/ECfnBGCXoAAAIRM.jpg:large\"/>\n        {props.message}\n        <div>\n          <span>Like</span> {props.likesCount}\n        </div>\n\n      </div>\n\n  )\n}\n)\n","import React from \"react\"\nimport { reduxForm, Field } from \"redux-form\"\nimport {required, maxLengthCreator} from \"../../util/Validator\"\nimport {TextArea} from \"../../common/FormControl/FormControl\"\n\nlet maxLength10 = maxLengthCreator(10)\n\nexport const AddPostForm = React.memo ((props: any) => {\n  return (\n    <form onSubmit={props.handleSubmit} >\n      \n       <div><Field component={TextArea} name=\"newPost\" type=\"text\" validate={[required, maxLength10 ]} /> </div>\n      <div><button>Add post</button></div>\n    </form>\n  )\n}\n)\nexport const AddPostReduxForm = reduxForm({\n  form: 'newPost'\n})(AddPostForm)\n\n","import React from \"react\"\nimport style from \"./MyPosts.module.css\"\nimport { Post } from \"./Post/Post\"\nimport { PostsPropsType} from \"../../../redux/Store\"\nimport {AddPostReduxForm } from \"../../AddPostForm/AddPostForm\"\n\ntype MyPostsPropsType = {\n addPost: (newPost: any)=> void\n posts: Array<PostsPropsType>\n newPostText: string\n}\n\nexport const MyPosts = React.memo ((props:MyPostsPropsType) => {  \n  let PostElements = props.posts.map ((post:PostsPropsType) => \n  <Post message={post.message} likesCount={post.likesCount} id={post.id} key={post.id} />)\n\n  const addPost = (value: any)=> {\n    props.addPost(value.newPost)\n      }\n\n  return (\n    <div className={style.myPosts}>\n      <h1>My posts</h1>\n      <AddPostReduxForm  onSubmit ={addPost}/>     \n      <div className={style.posts}>\n        {PostElements}\n      </div>\n    </div>\n\n  );\n}\n)\n","import { MyPosts } from \"./MyPosts\"\nimport { addPost} from \"../../../redux/ProfileReducer\"\nimport {connect} from \"react-redux\"\n\nlet mapStateToProps = (state: any) => {\n  return {\n     posts: state.profilePage.posts,\n     newPostText: state.profilePage.newPostText\n  }\n}\nlet mapDispatchToProps = (dispatch: Function) => {\n  return {\n    addPost: (newPost: any) => {\n      dispatch(addPost(newPost))\n    }\n  }\n}\n\nexport const MyPostsContainer = connect (mapStateToProps,  mapDispatchToProps )(MyPosts) \n\n","import React from \"react\"\nimport spinner from \"../../assets/image/Rolling-1s-200px.svg\"\n\nexport function Preloader() {\n  return <div>\n    <img src={spinner} />\n  </div>\n  \n}\n\n","import React from \"react\"\r\nimport style from \"../Profile.module.css\"\r\n\r\ntype ContactsPropsType = {  \r\n    contactTitle: string\r\n    contactValue: string\r\n    \r\n}\r\n\r\nexport const Contacts = React.memo ((props: ContactsPropsType) => {     \r\n    return (       \r\n        <div  className = {style.contacts}>\r\n           <b>{props.contactTitle}: </b> {props.contactValue}\r\n        </div>\r\n    );\r\n}\r\n)","import React from \"react\"\r\nimport style from \"../Profile.module.css\"\r\nimport {ContactsType, ProfileType} from \"../../../redux/ProfileReducer\"\r\nimport {Contacts} from \"./Contacts\"\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  activateEditMode: ()=> void\r\n}\r\n\r\n\r\nexport const ProfileData = React.memo((props: ProfileDataPropsType) => {\r\n \r\n  return (\r\n    \r\n    <div className={style.profileData}>\r\n      {props.isOwner && <div><button onClick = {props.activateEditMode}>Edit</button></div>}     \r\n\r\n      <h1>About me</h1>\r\n      <div>\r\n        <b>Full name: </b> {props.profile.fullName}\r\n      </div>\r\n\r\n      <div>\r\n        <b>Looking for a job: </b> {props.profile.lookingForAJob}\r\n      </div>\r\n      <div>\r\n        <b>My skills: </b> {props.profile.lookingForAJobDescription}\r\n      </div>\r\n      <div>\r\n        <b>About me: </b> {props.profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts: </b>\r\n\r\n        {props.profile.contacts && Object.keys(props.profile.contacts).map(key => {\r\n\r\n          return <Contacts key={key} contactTitle={key}\r\n            contactValue= {props.profile.contacts[key as keyof ContactsType]}\r\n          />\r\n        })}\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n)\r\n\r\n\r\n","import React from \"react\"\r\nimport { reduxForm, Field } from \"redux-form\"\r\nimport {Input} from \"../../../common/FormControl/FormControl\"\r\nimport style from \"../../../common/FormControl/FormControl.module.css\"\r\n\r\ntype ProfileDataFormPropsType = {\r\n  handleSubmit: any\r\n  initialValues: any\r\n  error: string\r\n}\r\n\r\nconst ProfileDataForm = React.memo((props: ProfileDataFormPropsType) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={style.profileForm} >\r\n      <div><button >Save</button></div>\r\n      {props.error && <div  className={style.formSummeryError}>{props.error}</div>}\r\n      <h1>About me</h1>\r\n      <div>  <b>Full name: </b><Field name=\"fullName\" component={Input} type=\"text\" placeholder={\"Full name\"} /></div>\r\n      <div><b>Looking for a job: </b> <Field name=\"lookingForAJob\" component={Input} type=\"checkbox\" />Looking for a job</div>\r\n      <div><b>My skills: </b><Field name=\"lookingForAJobDescription\" component={Input} type=\"text\" placeholder={\"looking For A Job Description\"} /></div>\r\n      <div><b>About me: </b><Field name=\"aboutMe\" component={Input} type=\"text\" placeholder={\"About me\"} /></div>\r\n      <div><b>Contacts: </b> {Object.keys(props.initialValues.contacts).map(key => {\r\n\r\n        return <div key={key}>\r\n          <b>{key} : <Field name={\"contacts.\" + \"\" + key} component={Input} type=\"text\" placeholder={key} /></b>\r\n        </div>\r\n      })}\r\n      </div>\r\n     \r\n    </form>\r\n  )\r\n}\r\n)\r\n\r\n  const ProfileDataReduxForm = reduxForm({\r\n    form: 'profileDataForm'\r\n  })(ProfileDataForm)    \r\n\r\n\r\n  export default  ProfileDataReduxForm\r\n\r\n","import React,  {useState}  from \"react\"\nimport style from \"../Profile.module.css\"\nimport {Preloader} from \"../../../common/Preloader/Preloader\"\nimport {ProfileData} from \"./ProfileData\"\nimport {ProfileType} from \"../../../redux/ProfileReducer\"\nimport ProfileDataForm from \"./ProfileDataForm\"\n\ntype ProfileInfoPropsType = {\n  profile: ProfileType\n  isOwner: boolean\n  saveProfile:(formData: any)=> void\n  \n}\n\nexport const ProfileInfo = React.memo((props: ProfileInfoPropsType) => {\n  if (!props.profile) { return <Preloader /> }\n\n  let [editMode, setEditMode] = useState<boolean>(false)\n\n  const onSubmit =  (formData: any)=> {\n    props.saveProfile(formData)\n    // @ts-ignore\n    .then (\n      ()=> {\n        setEditMode(false)\n      }\n    )   \n  }\n  return (\n    <div>\n\n      {editMode ? <ProfileDataForm  initialValues ={props.profile} onSubmit={onSubmit} />\n                :  <ProfileData profile={props.profile}\n                               isOwner={props.isOwner}\n                               activateEditMode={()=> {setEditMode(true)}}/> }   \n      \n    </div>\n  )\n}\n)\n","import React from \"react\"\r\nimport style from \"./Profile.module.css\"\r\nimport {NavLink, useRouteMatch} from \"react-router-dom\"\r\n\r\nexport const ProfileBur = React.memo (() => {     \r\n  let { path, url } = useRouteMatch();\r\n    return (  \r\n        <nav className={style.profileBur}>\r\n        <div className={style.item}>\r\n          <NavLink to={`${url}/myPosts`} activeClassName={style.active}>TimeLine</NavLink>\r\n        </div>\r\n        <div className={style.item}>\r\n          <NavLink to={`${url}/aboutMe`}activeClassName={style.active}>About</NavLink>\r\n        </div>\r\n    </nav>\r\n      \r\n    )\r\n}\r\n)\r\n","import React, { useState, useEffect } from \"react\"\n\ntype ProfileStatusPropsType = {\n  status: string\n  updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithUseState = React.memo ((props: ProfileStatusPropsType) => {\n  let [editMode, setEditMode] = useState<boolean>(false)\n  let [status, setStatus] = useState<string>(props.status)\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n  const deactivateEditMode = () => {\n    setEditMode(false)\n    props.updateStatus(status)\n  }\n  const onchangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  useEffect(() => {       \n    setStatus(props.status)       \n}, [props.status])  \n\n\n  return (\n    <div >\n      { editMode\n        ? <div>\n          <input onChange={onchangeStatus} autoFocus={true} onBlur={deactivateEditMode} type=\"text\" value={status} />\n        </div>\n        :\n        <div>\n          <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\n        </div> }\n    </div>\n  )\n}\n)\n\n\n","import React from \"react\"\r\nimport style from \"../Profile.module.css\"\r\nimport userProfilePhoto from \"../../../assets/image/darkBlueSpider.png\"\r\nimport {ProfileType} from \"../../../redux/ProfileReducer\"\r\nimport {ProfileStatusWithUseState} from \"../ProfileInfo/ProfileStatusWithUseState\"\r\n\r\n\r\ntype ProfileAvaPropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateStatus: (status: string)=> void\r\n  savePhoto: (file: any) => void\r\n  isOwner: boolean\r\n}\r\n\r\nexport const ProfileAva = React.memo((props: ProfileAvaPropsType) => {\r\n    const mainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files != null) {\r\n          props.savePhoto(e.target.files[0])\r\n        }\r\n      }\r\n    return <div className={style.ava}>\r\n        {props.profile.photos != null &&\r\n            <img src={props.profile.photos.large || userProfilePhoto} />\r\n        }\r\n        {props.isOwner && <input onChange={mainPhotoSelected} type=\"file\" />}\r\n        <ProfileStatusWithUseState status={props.status} updateStatus={props.updateStatus} />\r\n    </div>\r\n\r\n}\r\n)","import React from \"react\"\nimport style from \"./Profile.module.css\"\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\"\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\"\nimport {ProfileType} from \"../../redux/ProfileReducer\"\nimport {ProfileBur} from \"./ProfileBur\"\nimport {MainImageWrapper} from \"../../common/MainImageWrapper/MainImageWrapper\"\nimport mainImg from \"../../assets/image/lamp.jpg\"\nimport {Route, useRouteMatch, Switch, useParams} from \"react-router-dom\"\nimport {ProfileAva} from \"./ProfileAva/ProfileAva\"\n\n\n\ntype ProfilePropsType = {    \n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    savePhoto: (file: any) => void\n    authorizedUserId: number\n    saveProfile:(formData: any) => void\n}\n\nexport const Profile = React.memo ((props:ProfilePropsType) => {     \n\n    const { userId } = useParams<{userId: string}>()\n\n    let isOwner = false\n    if (+userId === props.authorizedUserId) {\n           isOwner = true \n    }\n\n\n    const mainImage= {\n        backgroundImage: `url(${mainImg })`\n      }\n      let { path, url } = useRouteMatch()\n     \n    return <div className={style.profileContant}>\n        <MainImageWrapper mainImage={mainImage} title=\"Profile\" />\n\n        <ProfileAva isOwner={isOwner}\n                    profile={props.profile}\n                    savePhoto={props.savePhoto}\n                    status={props.status}\n                    updateStatus={props.updateStatus} />\n\n        <ProfileBur />\n\n        <Switch>      \n            <Route path={`${path}/aboutMe`} render={() =>\n                <ProfileInfo isOwner={isOwner}\n                             profile={props.profile}\n                             saveProfile={props.saveProfile} />} />\n            <Route path={`${path}/myPosts`} render={() =>\n                <MyPostsContainer />} />\n        </Switch>\n    </div>\n}\n)","import React from \"react\"\nimport {Profile} from \"./Profile\"\nimport {getProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../redux/ProfileReducer\"\nimport {connect, ConnectedProps} from \"react-redux\"\nimport { RouteComponentProps, withRouter } from \"react-router-dom\"\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\"\nimport { compose } from \"redux\"\n\nexport class ProfileContainer extends React.PureComponent<ProfileContainerPropsType > {    \n    refrashProfile = () => {\n        let userId  = this.props.match.params.userId\n        if (!userId) {\n            userId =  this.props.authorizedUserId\n            this.props.history.push(`/profile/${userId}`)\n\n            if (!userId) {\n                return this.props.history.push(\"/login\")\n            }\n        }  \n        this.props.getProfile(+userId)    \n        this.props.getStatus(+userId)\n    }\n    componentDidMount = () => {\n        this.refrashProfile()\n    }\n\n    componentDidUpdate = (prevProps: any, prevState: any) => {\n        if (this.props.match.params.userId !== prevProps.match.params.userId ||\n            this.state !== prevState) {\n            this.refrashProfile()\n        }\n    }\n\n    \n    render = () => {  \n        return <div>\n            <Profile {...this.props} profile={this.props.profile}\n                                     updateStatus = {this.props.updateStatus}\n                                     status={this.props.status}\n                                     savePhoto={this.props.savePhoto}\n                                     authorizedUserId ={this.props.authorizedUserId}\n                                     saveProfile = {this.props.saveProfile}\n                                     />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state: any) => {\n    return {\n        profile: state.profilePage.profile, \n        status: state.profilePage.status,  \n        authorizedUserId:  state.auth.id   \n    }\n}\n\nconst connector = connect(mapStateToProps , { getProfile, getStatus, updateStatus, savePhoto, saveProfile})  \ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype OunParamsType = {\n    userId: string\n}\ntype ProfileContainerPropsType = RouteComponentProps<OunParamsType> & PropsFromRedux\n\nexport default compose <React.ComponentType>(\n    connect (mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect \n )(ProfileContainer)\n\n    ","import React, {useState} from \"react\"\r\nimport style from \"./Paginator.module.css\"\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    onChangePage: (pageNumber: number)=> void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = React.memo (({totalItemsCount, pageSize, currentPage, onChangePage, portionSize=10, ...props}: PaginatorPropsType) => {  \r\n    let pageCount: number = Math.ceil(totalItemsCount / pageSize) // Math.сeil округляет число в большую сторону\r\n    let pages: Array<number> = []\r\n    let i: number\r\n    for (i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }    \r\n    let portionCount: number = Math.ceil(pageCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState<number>(1)\r\n    let leftPortionPageNumber: number =  (portionNumber -1) * portionSize + 1\r\n    let rightPortionPageNumber: number = portionNumber * portionSize\r\n    return <div>    \r\n        { portionNumber> 1 &&\r\n        <button onClick = {()=> {setPortionNumber(portionNumber - 1)}}>PREV</button> } \r\n        \r\n        {pages\r\n        .filter (p=> p>= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n        .map((p,i) => {\r\n            const currentPageClass = currentPage === p ? style.selectedPage : \"\";\r\n            return <span className={currentPageClass} key={i}\r\n                onClick={() => { onChangePage(p) }}>{p}</span>\r\n        })\r\n        }\r\n        { portionCount > portionNumber &&\r\n        <button onClick = {()=> {setPortionNumber(portionNumber + 1)}}>NEXT</button> } \r\n    </div>\r\n}\r\n)","import React from \"react\"\r\nimport style from \"./Users.module.css\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport userPhoto from \"../../assets/image/Голубой Круг Бизнес Логотип (3).png\"\r\nimport { UserType } from \"../../redux/UsersReducer\"\r\nimport mainImg from \"../../assets/image/666.jpg\"\r\n\r\ntype UserPropsType = {\r\n    user: UserType \r\n    followingInProgress: Array<number> \r\n    follow:(userId: number)=> void\r\n    unfollow: (userId: number)=> void \r\n}\r\n\r\nexport const User = React.memo(({ user, followingInProgress, follow, unfollow }:UserPropsType) => {\r\n    const mainImage= {\r\n        backgroundImage: `url(${mainImg })`\r\n      }\r\n   \r\n    return <div className={style.user} style={mainImage} >\r\n\r\n        <div className={style.userAvatar}>\r\n            <NavLink to={\"/profile/\" + user.id}>\r\n                <img src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n            </NavLink>\r\n            <div>{user.followed\r\n                ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                    onClick={() => { unfollow(user.id) }}>Unfollow</button>\r\n                : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                    onClick={() => { follow(user.id) }}>Follow</button>}\r\n            </div>\r\n        </div>\r\n        <div className={style.userInfo}>\r\n            <h3>{user.name}</h3>\r\n            <div className={style.city}>{user.status}</div>\r\n            <div>{user.status}</div>\r\n        </div>        \r\n    </div>\r\n}\r\n)","import React from \"react\"\r\nimport { reduxForm, Field, InjectedFormProps } from \"redux-form\"\r\nimport {Input} from \"../../common/FormControl/FormControl\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faSearch} from \"@fortawesome/free-solid-svg-icons\"\r\nimport style from \"../../common/FormControl/FormControl.module.css\"\r\n\r\nconst SearchForm: React.FC<InjectedFormProps<SearchFormValuesType, SearchFormOwnPropsType> & SearchFormOwnPropsType> = ({handleSubmit}) => {\r\n    return (\r\n      <form onSubmit={handleSubmit} className={style.searchForm} >\r\n        <Field name=\"term\" component={Input} type=\"text\" placeholder={\"Type here to search...\"} />              \r\n        <button className={style.searchButton}><FontAwesomeIcon icon={faSearch} size=\"1x\"/> </button>\r\n      </form>\r\n    )\r\n  }\r\n export const SearchReduxForm = reduxForm<SearchFormValuesType, SearchFormOwnPropsType>({\r\n    form: 'search'\r\n  })(SearchForm)\r\n\r\n\r\n  //types\r\nexport type SearchFormValuesType = {\r\n    term: string\r\n  }\r\n  \r\n  type SearchFormOwnPropsType = {\r\n  }","import React from \"react\"\nimport style from \"./Users.module.css\"\nimport { UserType } from \"../../redux/UsersReducer\"\nimport mainImg from \"../../assets/image/houses.jpg\"\nimport {Paginator} from \"../../common/Paginator/Paginator\"\nimport {User} from \"./User\"\nimport { MainImageWrapper } from \"../../common/MainImageWrapper/MainImageWrapper\"\nimport { SearchReduxForm, SearchFormValuesType } from \"../Users/SearchForm\"\n\ntype UsersPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    usersTotalCount: number\n    currentPage: number\n    onChangePage: (pageNumber: number)=> void\n    followingInProgress: Array<number>\n    follow:(userId: number)=> void\n    unfollow: (userId: number)=> void\n}\n\nexport const Users = React.memo (({users, pageSize, usersTotalCount, currentPage, onChangePage, followingInProgress, follow, unfollow}: UsersPropsType) => {     \n   \n    const mainImage= {\n        backgroundImage: `url(${mainImg })`\n      }\n      const onSubmit = (formData:SearchFormValuesType )=> {\n        // props.search(formData.term)\n        alert (formData.term)\n          }\n    return <div>   \n        <div className={style.usersContant}>\n            <MainImageWrapper mainImage={mainImage} title=\"Users\"/>          \n        </div> \n        <SearchReduxForm onSubmit ={onSubmit}  />\n        <Paginator totalItemsCount={usersTotalCount} pageSize={pageSize} currentPage={currentPage} onChangePage={onChangePage} portionSize={10}/>     \n       <div className={style.users}>\n       {users.map(u => <User key={u.id} user={u} followingInProgress={followingInProgress} follow={follow} unfollow={unfollow}/> )}\n       </div>\n      \n    </div>\n}\n)","import {UserAPI} from \"../api/api\"\nimport {ACTIONS_TYPE} from \"./enumActionsType\"\nimport { handleServerAppError,  handleServerNetworkError} from \"../util/errorUtils\"\n\nlet initialState = {\n    users: [ ] as Array<UserType>,\n    pageSize: 10,\n    usersTotalCount:0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [1,2]\n   }\n\nexport const usersReducer = (state= initialState, action: ActionsType): InitialStateType => {\n    \n    switch (action.type) {\n        case ACTIONS_TYPE.FOLLOW: {\n\n            let stateCopy = {\n                ...state,\n                users: state.users.map( u => {\n                    if (u.id === action.actionId) {\n                        return { ...u, followed: true,\n                        }\n                    } else { return u }\n                })\n            }\n            return stateCopy\n        }\n        case ACTIONS_TYPE.UNFOLLOW: {\n            let stateCopy = {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.actionId) {\n                        return {\n                            ...u, followed: false,\n                        }\n                    } else { return u }\n                })\n            }\n            return stateCopy\n        }\n        case ACTIONS_TYPE.SETUSERS: {\n            let stateCopy = {\n                ...state,\n                users: action.users\n            }\n            return stateCopy\n        }\n        case ACTIONS_TYPE.SETCURRENTPAGE: {\n            let stateCopy = {\n                ...state,\n            currentPage: action.currentPage}   \n            return stateCopy\n        }\n        case ACTIONS_TYPE.SETUSERSTOTALCOUNT: {\n            let stateCopy = {\n                ...state,\n            usersTotalCount: action.usersTotalCount}    \n            return stateCopy\n        }\n        case ACTIONS_TYPE.TOGGLEISFATCHING: {\n            let stateCopy = {\n                ...state,\n            isFetching: action.isFetching}    \n            return stateCopy\n        }\n        case ACTIONS_TYPE.TOGGLEFOLLOWINGINPROGRESS: {\n            let stateCopy = {\n                ...state,                 \n                followingInProgress: action.isFetching \n                ? [...state.followingInProgress, action.userId]\n                : state.followingInProgress.filter(id=>id != action.userId)\n            }\n            return stateCopy\n        }\n        default: return state\n    }\n}\nexport const followSuccess = (actionId: number) => ({type: ACTIONS_TYPE.FOLLOW, actionId}as const)\nexport const unfollowSuccess = (actionId: number)  => ({type: ACTIONS_TYPE.UNFOLLOW, actionId}as const)\nexport const setUsers = (users: Array<UserType>) => ({type: ACTIONS_TYPE.SETUSERS, users}as const)\nexport const setCurrentPage = (currentPage:number) => ({type: ACTIONS_TYPE.SETCURRENTPAGE, currentPage}as const)\nexport const setUsersTotalCount = (usersTotalCount:number)  => ({type: ACTIONS_TYPE.SETUSERSTOTALCOUNT, usersTotalCount}as const)\nexport const toggleIsFetching = (isFetching:boolean)  => ({type: ACTIONS_TYPE.TOGGLEISFATCHING, isFetching}as const)\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number)=> ({type: ACTIONS_TYPE.TOGGLEFOLLOWINGINPROGRESS, isFetching, userId}as const)\n\n\nexport const getUsers = (currentPage: number, pageSize: number) =>\n    async (dispatch: any) => {\n        try {\n            dispatch(toggleIsFetching(true))\n            dispatch(setCurrentPage(currentPage))\n            let response = await UserAPI.getUsers(currentPage, pageSize)\n            dispatch(toggleIsFetching(false))\n            dispatch(setUsers(response.data.items))\n            dispatch(setUsersTotalCount(response.data.totalCount))\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        } \n    }\n\nexport const follow = (userId: number) =>\n    async (dispatch: any) => {\n        try {\n            dispatch(toggleFollowingInProgress(true, userId))\n            let response = await UserAPI.postUserFollow(userId)            \n                    if (response.data.resultCode === 0) {\n                        dispatch(followSuccess(userId))\n                    }\n                    dispatch(toggleFollowingInProgress(false, userId))   \n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }                 \n    }\n\nexport const unfollow = (userId: number) =>\n    async (dispatch: any) => {\n        try {\n            dispatch(toggleFollowingInProgress(true, userId))\n            let response = await UserAPI.deleteUserFollow(userId)            \n                    if (response.data.resultCode === 0) {\n                        dispatch(unfollowSuccess(userId))\n                    }\n                    dispatch(toggleFollowingInProgress(false, userId))   \n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }                \n    }\n\n   //types\n\ntype ActionsType = \n| ReturnType<typeof followSuccess> \n| ReturnType<typeof unfollowSuccess> \n| ReturnType<typeof setUsers> \n| ReturnType<typeof setCurrentPage> \n| ReturnType<typeof setUsersTotalCount> \n| ReturnType<typeof toggleIsFetching> \n| ReturnType<typeof toggleFollowingInProgress> \n\nexport type PhotosType = {\n    small: null | string\n    large: null | string\n}\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName: string\n    photos: PhotosType\n    status: string   \n    followed: boolean\n}\n\nexport type InitialStateType = typeof initialState","import { AppStateType } from \"./StoreRedux\"\r\nimport {createSelector} from \"reselect\"\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsersSuperSelector = createSelector (getUsersSelector, (users) => {\r\n    return users.filter (u => true)\r\n})\r\nexport const getPageSizeSelector = (state: AppStateType) => {\r\n    return  state.usersPage.pageSize\r\n}\r\nexport const getUsersTotalCountSelector = (state: AppStateType) => {\r\n    return state.usersPage.usersTotalCount\r\n}\r\nexport const getCurrentPageSelector = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetchingSelector = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgressSelector = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress \r\n}\r\n","import React from \"react\"\nimport {Users} from \"./Users\"\nimport {Preloader} from \"../../common/Preloader/Preloader\"\nimport { getUsers, follow, unfollow } from \"../../redux/UsersReducer\"\nimport {connect, ConnectedProps} from \"react-redux\"\nimport {getUsersSuperSelector , getPageSizeSelector, getUsersTotalCountSelector, getCurrentPageSelector, getIsFetchingSelector, getFollowingInProgressSelector } from \"../../redux/UsersSelectors\"\n\nexport class UsersContainer extends React.PureComponent<PropsFromRedux> {\n    componentDidMount = () => {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)       \n    }  \nonCgangePage = (pageNumber: number) => {\n    this.props.getUsers(pageNumber, this.props.pageSize)    \n}\nrender = () => {\n    return <div>\n        \n        {this.props.isFetching ? <Preloader/> : null}\n        \n        <Users \n    users= {this.props.users}\n    pageSize= {this.props.pageSize}\n    usersTotalCount= {this.props.usersTotalCount}\n    currentPage= {this.props.currentPage}\n    onChangePage={this.onCgangePage}\n    followingInProgress= {this.props.followingInProgress}\n    follow={this.props.follow}\n    unfollow={this.props.unfollow} />\n      \n    </div>\n}\n}\n\nlet mapStateToProps = (state: any) => {\n    return {\n        users: getUsersSuperSelector (state),\n        pageSize: getPageSizeSelector(state),\n        usersTotalCount: getUsersTotalCountSelector(state),\n        currentPage: getCurrentPageSelector(state),    \n        isFetching: getIsFetchingSelector(state),\n        followingInProgress: getFollowingInProgressSelector(state)    \n    }\n}\n \nconst connector = connect(mapStateToProps , {  getUsers, follow, unfollow })\n  \n  type PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connect (mapStateToProps,\n    { getUsers, follow, unfollow } )\n     (UsersContainer)","import React from \"react\"\r\nimport style from \"./FollowUser.module.css\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport userPhoto from \"../../../assets/image/Голубой Круг Бизнес Логотип (3).png\"\r\nimport { UserType } from \"../../../redux/UsersReducer\"\r\n\r\ntype FollowUserPropsType = {\r\n    user: UserType \r\n    followingInProgress: Array<number> \r\n    follow:(userId: number)=> void\r\n    unfollow: (userId: number)=> void \r\n}\r\n\r\nexport const FollowUser = React.memo(({ user, followingInProgress, follow, unfollow }: FollowUserPropsType) => {\r\n\r\n    return <div className={style.followUser}>\r\n        <div className={style.followUserAvatar}>\r\n            <NavLink to={\"/profile/\" + user.id}>\r\n                <img src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n            </NavLink>\r\n        </div>\r\n\r\n        <div className={style.followUserBody}>\r\n            {user.name}\r\n            <div>{user.followed\r\n                ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                    onClick={() => { unfollow(user.id) }}>Unfollow</button>\r\n                : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                    onClick={() => { follow(user.id) }}>Follow</button>} </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\n)","import React from \"react\"\nimport style from \"./RightBar.module.css\"\nimport { UserType } from \"../../redux/UsersReducer\"\nimport {FollowUser} from \"./FollowUser/FollowUser\"\n\ntype RightBarPropsType = {\n  users: Array<UserType>\n  pageSize: number\n  usersTotalCount: number\n  currentPage: number\n  onChangePage: (pageNumber: number)=> void\n  followingInProgress: Array<number>\n  follow:(userId: number)=> void\n  unfollow: (userId: number)=> void\n}\n\n\nexport const RightBar = React.memo (({users, pageSize, usersTotalCount, currentPage, onChangePage, followingInProgress, follow, unfollow}: RightBarPropsType) => {\n\n  return (\n      <nav className={style.rightBur}>\n     {users\n     .filter(u => u.followed)\n     .map(u => <FollowUser key={u.id} user={u} followingInProgress={followingInProgress} follow={follow} unfollow={unfollow}/>      \n\n        )\n        }\n      </nav>\n\n  )}\n)\n","import React from \"react\"\nimport { RightBar } from \"./RightBar\"\nimport style from \"./RightBar.module.css\"\nimport {Preloader} from \"../../common/Preloader/Preloader\"\nimport { getUsers, follow, unfollow } from \"../../redux/UsersReducer\"\nimport {connect, ConnectedProps} from \"react-redux\"\nimport {getUsersSuperSelector , getPageSizeSelector, getUsersTotalCountSelector, getCurrentPageSelector, getIsFetchingSelector, getFollowingInProgressSelector } from \"../../redux/UsersSelectors\"\n\n\n\nexport class RightBarContainer extends React.PureComponent<PropsFromRedux> {\n  componentDidMount = () => {\n      this.props.getUsers(this.props.currentPage, this.props.pageSize)       \n  }  \nonCgangePage = (pageNumber: number) => {\n  this.props.getUsers(pageNumber, this.props.pageSize)    \n}\nrender = () => {\n  return <div>\n      \n      {this.props.isFetching ? <Preloader/> : null}\n      \n      <RightBar \n  users= {this.props.users}\n  pageSize= {this.props.pageSize}\n  usersTotalCount= {this.props.usersTotalCount}\n  currentPage= {this.props.currentPage}\n  onChangePage={this.onCgangePage}\n  followingInProgress= {this.props.followingInProgress}\n  follow={this.props.follow}\n  unfollow={this.props.unfollow} />\n    \n  </div>\n}\n}\n\nlet mapStateToProps = (state: any) => {\n  return {\n      users: getUsersSuperSelector (state),\n      pageSize: getPageSizeSelector(state),\n      usersTotalCount: getUsersTotalCountSelector(state),\n      currentPage: getCurrentPageSelector(state),    \n      isFetching: getIsFetchingSelector(state),\n      followingInProgress: getFollowingInProgressSelector(state)    \n  }\n}\n\nconst connector = connect(mapStateToProps , {  getUsers, follow, unfollow })\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connect (mapStateToProps,\n  { getUsers, follow, unfollow } )\n   (RightBarContainer)","import { applyMiddleware, combineReducers, createStore, compose } from \"redux\"\nimport {profileReducer} from \"./ProfileReducer\"\nimport {dialogsReducer} from \"./DialogsReducer\"\nimport { usersReducer } from \"./UsersReducer\"\nimport { authReducer } from \"./AuthReducer\"\nimport { appReducer } from \"./AppReducer\"\nimport thunkMiddleware from \"redux-thunk\"\nimport { reducer as formReducer } from \"redux-form\"\n\n\nlet redusers = combineReducers (\n    {\n        profilePage: profileReducer,\n        dialogsPage: dialogsReducer,\n        usersPage: usersReducer,\n        auth: authReducer,\n        form: formReducer,\n        app: appReducer\n    }\n)\n\nexport type AppStateType = ReturnType<typeof redusers>\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(redusers, composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n  ))\n\n// export let store = createStore (redusers, applyMiddleware (thunkMiddleware))\n","import React, {Suspense} from \"react\"\r\nimport { Preloader } from \"../common/Preloader/Preloader\"\r\n\r\n\r\nexport function withSuspense(Component: React.ComponentType) {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader />}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    }\r\n}\r\n\r\n","import React from \"react\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {AppStateType} from \"../../redux/StoreRedux\"\r\nimport {setErrorAC} from \"../../redux/AppReducer\"\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n\r\nexport function ErrorSnackBar() {\r\n    const error  = useSelector<AppStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n   \r\n//   const [open, setOpen] = React.useState(false);\r\nlet isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    };\r\n\r\n  return (    \r\n      <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n    \r\n  );\r\n}","import React from \"react\"\nimport {connect, ConnectedProps} from \"react-redux\"\nimport \"./App.css\"\nimport {Route, HashRouter, Switch} from \"react-router-dom\"\nimport {NavBar} from \"./components/NavBar/NavBar\"\nimport HeaderContainer from \"./components/Header/HeaderContainer\"\nimport ProfileContainer from \"./components/Profile/ProfileContainer\"\nimport UsersContainer from \"./components/Users/UsersContainer\"\nimport RightBarContainer from \"./components/RightBar/RightBarContainer\"\nimport { AppStateType } from \"./redux/StoreRedux\"\nimport { initializeApp } from \"./redux/AppReducer\"\nimport { Preloader } from \"./common/Preloader/Preloader\"\nimport { RouteComponentProps, withRouter, Redirect } from \"react-router-dom\"\nimport { compose } from \"redux\"\nimport { store } from \"./redux/StoreRedux\"\nimport { Provider } from \"react-redux\"\nimport { withSuspense } from \"./hoc/withSuspense\"\nimport { ErrorSnackBar } from \"./components/ErrorSnackBar/ErrorSnackBar\"\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\")) // Ленивая загрузка\nconst Settings = React.lazy(() => import(\"./components/Settings/Settings\"))\nconst News = React.lazy(() => import(\"./components/News/News\"))\nconst Music = React.lazy(() => import(\"./components/Music/Music\"))\nconst Login = React.lazy(() => import(\"./components/Login/Login\"))\nconst ChatPage = React.lazy(() => import(\"./pages/ChatPage\"))\n\nexport class App extends React.PureComponent<AppPropsType> {\n  componentDidMount = () => {\n    this.props.initializeApp()\n  }\n  render = () => {\n    if (!this.props.isInitialized) {\n      return <Preloader />\n    }\n    return (\n      <div className=\"app-wrapper\">\n        \n        <HeaderContainer />\n        <div className=\"app-body\">\n        <ErrorSnackBar />\n          <NavBar />\n          <RightBarContainer />\n          <div className=\"app-content\">\n            <Switch>\n              <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"} />} />\n              <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />}/>\n              <Route path=\"/dialogs\" render={withSuspense(DialogsContainer)} />\n              <Route path=\"/users\" render={() => <UsersContainer />} />\n              <Route path=\"/music\" render={withSuspense(Music)} />\n              <Route path=\"/settings\" render={withSuspense(Settings)} />\n              <Route path=\"/login\" render={withSuspense(Login)} />\n              <Route path=\"/news\" render={withSuspense(News)} />\n              <Route path=\"/chat\" render={withSuspense(ChatPage)} />\n              <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n            </Switch>\n          </div>\n        </div >\n      </div>\n    )\n  }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    isInitialized: state.app.isInitialized\n  }\n}  \nconst connector = connect(mapStateToProps , {initializeApp})\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype AppPropsType = RouteComponentProps & PropsFromRedux\n\nlet AppContainer =  compose <React.ComponentType>(\n  connect(mapStateToProps, {initializeApp} ),\n  withRouter \n)(App)\n\n\nexport const MainApp = React.memo(() => {\n  return <HashRouter>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </HashRouter>\n\n}\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport {MainApp} from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\n\nReactDOM.render( <MainApp />, document.getElementById('root'))\nserviceWorker.unregister()\n","import {Dispatch} from \"redux\"\nimport { getMe, SetUserDataActionType } from \"./AuthReducer\"\nimport {ACTIONS_TYPE} from \"./enumActionsType\"\n\nlet initialState: InitialStateType = {\n    isInitialized: false,\n    error: null\n}\n\nexport const appReducer = (state= initialState, action: ActionsType): InitialStateType => {\n    \n    switch (action.type) {\n        \n        case ACTIONS_TYPE.INITIALIZED_SUCCESSED: {\n            return { ...state,\n                isInitialized: true\n            }             \n        }     \n        case ACTIONS_TYPE.SET_ERROR: {\n            return { ...state,\n                error: action.error\n            }             \n        }              \n        default: return state\n    }\n}\n\nexport const InitializedSuccessedAC = () => ({ type: ACTIONS_TYPE.INITIALIZED_SUCCESSED} as const)\nexport const setErrorAC = (error: string | null) => ({ type: ACTIONS_TYPE.SET_ERROR, error} as const)\n\n\nexport const initializeApp = () => async (dispatch: any) => {\n    let promise = dispatch(getMe())\n    let response = await Promise.all ([promise])   \n        dispatch(InitializedSuccessedAC())   \n}\n//types\n\nexport type InitialStateType = {\n   isInitialized: boolean\n   error: null | string\n}\nexport type SetErrorActionType = ReturnType<typeof setErrorAC> \n\ntype ActionsType = ReturnType<typeof InitializedSuccessedAC> | SetErrorActionType\n\ntype ThunkDispatch = Dispatch <ActionsType | SetUserDataActionType >","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__2UKem\",\"error\":\"FormControl_error__1tHtd\",\"errorSpan\":\"FormControl_errorSpan__ue2ZY\",\"formSummeryError\":\"FormControl_formSummeryError__1wEO3\",\"form\":\"FormControl_form__3XGTz\",\"loginBlock\":\"FormControl_loginBlock__1m0F_\",\"searchButton\":\"FormControl_searchButton__DNSQD\",\"loginCheckBox\":\"FormControl_loginCheckBox__2IDiv\"};","import React from \"react\"\nimport { WrappedFieldMetaProps } from \"redux-form\"\nimport style from \"./FormControl.module.css\"\n\ntype FormControlPropsType = {\n  meta: WrappedFieldMetaProps\n}\n\n const FormControl: React.FC<FormControlPropsType> = ({meta, children}) => {\n\n  const hasError = meta.touched && meta.error\n\n  return (\n  <>\n    <div className={style.formControl + \" \" + (hasError ? style.error: \"\")}>\n      {children}\n    </div>\n    {hasError && <span className={style.errorSpan } >{meta.error}</span>}\n   \n  </>\n  )\n}\n\nexport function TextArea (props: any) {\n  const {input, meta, children, ...restProps} = props\n  return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\n}\n\nexport function Input (props: any) {\n  const {input, meta, children, ...restProps} = props\n  return <FormControl {...props}> <input {...input} {...restProps} className={style.formInput} /></FormControl>\n}\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2etDN\",\"logo\":\"Header_logo__1RdLJ\",\"searchBur\":\"Header_searchBur__1Bp8_\",\"loginBlock\":\"Header_loginBlock__3mGyR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3NbUL\",\"user\":\"Users_user__1KNSY\",\"userInfo\":\"Users_userInfo__2jpxG\",\"userAvatar\":\"Users_userAvatar__2OUgL\"};","import {AuthAPI, SecurityAPI} from \"../api/api\"\nimport {Dispatch} from \"redux\"\nimport {stopSubmit} from \"redux-form\"\nimport {ACTIONS_TYPE} from \"./enumActionsType\"\nimport { handleServerAppError,  handleServerNetworkError} from \"../util/errorUtils\"\n\nlet initialState: InitialStateType = {\n    id: null as number | null,\n    email: null as string | null,    \n   login: \"Julia\" as string | null,\n   isAuth: false,\n   captchaUrl: null\n}\n\nexport const authReducer = (state= initialState, action: ActionsType): InitialStateType => {\n    \n    switch (action.type) {\n        \n        case ACTIONS_TYPE.SET_USER_DATA: {\n           let stateCopy = { ...state,\n        ...action.data }               \n      \n           return stateCopy\n        }\n        case ACTIONS_TYPE.GET_CAPTCHA_URL_SUCCESS: {\n            return {\n                ...state,\n                captchaUrl: action.captchaUrl\n            }\n        }\n        default: return state\n    }\n}\n\nexport const setUserData = ( id: number | null, email:string | null, login: string | null, isAuth: boolean) => ({type: ACTIONS_TYPE.SET_USER_DATA, data: {id, email, login, isAuth}}as const)\nexport const getCaptchaUrlSuccess = ( captchaUrl: string | null) => ({type: ACTIONS_TYPE.GET_CAPTCHA_URL_SUCCESS, captchaUrl}as const)\n\nexport const getMe = () => async (dispatch: Dispatch) => {\n    try {\n        let response = await AuthAPI.getAuthMe()\n        if (response.data.resultCode === 0) {\n            let { id, email, login, isAuth } = response.data.data\n            dispatch(setUserData(id, email, login, true))\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) =>\n    async (dispatch: any) => {\n        try {\n            let response = await AuthAPI.login(email, password, rememberMe, captcha)\n            if (response.data.resultCode === 0) {\n                dispatch(getMe())\n            } else {\n                if (response.data.resultCode === 10) {\n                    dispatch(getCaptchaUrl())\n                }\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n                dispatch(stopSubmit(\"login\", { _error: message }))\n            }\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }\n    }\n\nexport const logout = () =>\n    async (dispatch: any) => {\n        try {\n            const response = await AuthAPI.logout()\n            if (response.data.resultCode === 0) {\n                dispatch(setUserData(null, null, null, false))\n            }\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }\n    }\n\nexport const getCaptchaUrl = () =>\n    async (dispatch: any) => {\n        try {\n            const response = await SecurityAPI.getCaptchaUrl()\n            const captchaUrl = response.data.url\n            dispatch(getCaptchaUrlSuccess(captchaUrl))\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n        }\n    }\n\n//types\n\nexport type SetUserDataActionType = ReturnType<typeof setUserData>\ntype ActionsType = SetUserDataActionType | ReturnType<typeof getCaptchaUrlSuccess>\n\n\nexport type DataType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\nexport type InitialStateType = {\n    id: number | null\n    email: string | null    \n   login: string | null\n   isAuth: boolean\n   captchaUrl: string | null\n}\n","export enum ACTIONS_TYPE {\r\n  INITIALIZED_SUCCESSED = \"socialNetwork/app/INITIALIZED-SUCCESSED\",\r\n  SET_ERROR = \"socialNetwork/app/SET_ERROR\",\r\n  SET_USER_DATA = \"socialNetwork/auth/SET-USER-DATA\",\r\n  GET_CAPTCHA_URL_SUCCESS = \"socialNetwork/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n  SEND_MESSAGE = \"socialNetwork/dialogs/SEND-MESSAGE\",\r\n  FOLLOW = \"socialNetwork/users/FOLLOW\",\r\n  UNFOLLOW = \"socialNetwork/users/FUNFOLLOW\",\r\n  SETUSERS = \"socialNetwork/users/FSET-USERS\",\r\n  SETCURRENTPAGE = \"socialNetwork/users/FSET-CURRENT-PAGE\",\r\n  SETUSERSTOTALCOUNT = \"socialNetwork/users/FSET-USERS-TOTAL-COUNT\",\r\n  TOGGLEISFATCHING = \"socialNetwork/users/FTOGGLE-IS-FETCHING\",\r\n  TOGGLEFOLLOWINGINPROGRESS = \"socialNetwork/users/FTOGGLE-FOLLOWING-IN-PROGRESS\",\r\n  ADD_POST = \"socialNetwork/profile/ADD-POST\",\r\n  SET_USER_PROFILE = \"socialNetwork/profile/SET-USER-PROFILE\",\r\n  SET_STATUS = \"socialNetwork/profile/SET-STATUS\",\r\n  REMOVE_POST = \"socialNetwork/profile/REMOVE-POST\",\r\n  SAVE_PHOTO_SUCCESS = \"socialNetwork/profile/SAVE-PHOTO-SUCCESS\"\r\n}","module.exports = __webpack_public_path__ + \"static/media/Голубой Круг Бизнес Логотип (3).5ef4e419.png\";","import React from \"react\"\r\nimport style from \"./MainImageWrapper.module.css\"\r\n\r\nexport const MainImageWrapper = React.memo ((props:{mainImage: object, title: string}) => {\r\n \r\n  return <div>\r\n<div className={style.mainImageWrapper} style={props.mainImage}></div>       \r\n<div className={style.titleOnImage} >\r\n                <div className={style.titleOnImageBlock } >\r\n                    <h2>{props.title}</h2>\r\n                </div>\r\n            </div>     \r\n  </div>\r\n  \r\n  \r\n}\r\n)\r\n"],"sourceRoot":""}