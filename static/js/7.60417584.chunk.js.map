{"version":3,"sources":["pages/ChatPage.module.css","pages/ChatPage.tsx"],"names":["module","exports","ChatPage","Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createWSChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessagesForm","messages","setMessages","messageHandler","e","prevMessages","JSON","parse","data","className","style","map","m","index","Message","key","message","newMessage","setNewMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","send","src","photo","userName"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,4B,oQCWnDC,UAPY,WACvB,OACI,6BACI,kBAACC,EAAD,QAML,IAAMA,EAAiB,WAAO,IAAD,EACAC,mBAA2B,MAD3B,mBAC3BC,EAD2B,KAChBC,EADgB,KA0BhC,OAvBAC,qBAAU,WACN,IAAIC,EACEC,EAAe,WACjBC,QAAQC,IAAI,YACZC,WAAWC,EAAiB,MAGhC,SAASA,IAAmB,IAAD,IACrB,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,QAEJP,EAAK,IAAIQ,UAAU,gEACnBV,EAAaE,GACbA,EAAGS,iBAAiB,QAASR,GAIjC,OAFAI,IAEO,WACHL,EAAGM,oBAAoB,QAASL,GAChCD,EAAGO,WAER,IAGC,6BACI,kBAACG,EAAD,CAAUb,UAAaA,IACvB,kBAACc,EAAD,CAAiBd,UAAaA,MAK7Ba,EAAoD,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,UAAe,EAChDD,mBAAiC,IADe,mBACzEgB,EADyE,KAC/DC,EAD+D,KAW9E,OATAd,qBAAU,WACN,IAAMe,EAAiB,SAACC,GACpBF,GAAY,SAACG,GAAD,4BAAsBA,GAAtB,YAAuCC,KAAKC,MAAMH,EAAEI,YAGpE,OADS,OAATtB,QAAS,IAATA,KAAWY,iBAAiB,UAAWK,GAChC,WACM,OAATjB,QAAS,IAATA,KAAWS,oBAAoB,UAAWQ,MAE/C,CAACjB,IAEA,yBAAKuB,UAAWC,IAAMT,UACjBA,EAASU,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKF,EAAOG,QAASJ,SAKzDZ,EAA2D,SAAC,GAAiB,IAAhBd,EAAe,EAAfA,UAAe,EACjDD,mBAAiB,IADgC,mBAC9EgC,EAD8E,KAClEC,EADkE,OAE/CjC,mBAA8B,WAFiB,mBAE9EkC,EAF8E,KAEjEC,EAFiE,KAIjFhC,qBAAU,WACN,IAAMiC,EAAc,WAChBD,EAAe,UAGvB,OADS,OAATlC,QAAS,IAATA,KAAWY,iBAAiB,OAAQuB,GAC7B,WACM,OAATnC,QAAS,IAATA,KAAWS,oBAAoB,OAAQ0B,MAE5C,CAACnC,IAYJ,OACI,6BACI,8BAAUoC,SAZM,SAAClB,GACrBc,EAAcd,EAAEmB,cAAcC,QAWaA,MAAQP,IAC/C,4BAAQQ,SAA0B,OAAdvC,GAAsC,UAAhBiC,EAAyBO,QAVvD,WACXT,IAGI,OAAT/B,QAAS,IAATA,KAAWyC,KAAKV,GAChBC,EAAc,OAKV,UAKCJ,EAA+C,SAAC,GAAe,IAAdE,EAAa,EAAbA,QACtD,OACA,yBAAKP,UAAWC,IAAMM,SACjB,yBAAKY,IAAKZ,EAAQa,QAAQ,2BAAIb,EAAQc,UAAa,8BAAOd,EAAQA,SAClE","file":"static/js/7.60417584.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"ChatPage_messages__3fN7y\",\"message\":\"ChatPage_message__1ngaY\"};","import React, { useEffect, useState } from \"react\"\r\nimport { MessagesPropsType } from \"../redux/Store\"\r\nimport style from \"./ChatPage.module.css\"\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\nexport default ChatPage\r\n\r\nexport const Chat: React.FC = () => {\r\n    let [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n        const closeHandler = () => {\r\n            console.log(\"CLOSE WS\")\r\n            setTimeout(createWSChannel, 3000)\r\n        }\r\n\r\n        function createWSChannel() {\r\n            ws?.removeEventListener(\"close\", closeHandler)\r\n            ws?.close()\r\n\r\n            ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n            setWsChannel(ws)\r\n            ws.addEventListener(\"close\", closeHandler)\r\n        }\r\n        createWSChannel()\r\n\r\n        return () => {\r\n            ws.removeEventListener(\"close\", closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Messages wsChannel = {wsChannel}/>\r\n            <AddMessagesForm wsChannel = {wsChannel}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Messages: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n    let [messages, setMessages] = useState<Array<ChatMessageType>>([])\r\n    useEffect(() => {\r\n        const messageHandler = (e: MessageEvent) => { \r\n            setMessages((prevMessages) => [...prevMessages, ...JSON.parse(e.data)])\r\n        }\r\n        wsChannel?.addEventListener(\"message\", messageHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener(\"message\", messageHandler)\r\n        }\r\n    }, [wsChannel])   \r\n    return (\r\n        <div className={style.messages}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddMessagesForm: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n    const [newMessage, setNewMessage] = useState<string>(\"\")\r\n    const [readyStatus, setReadyStatus] = useState<\"ready\" | \"pending\">(\"pending\")\r\n\r\n        useEffect(() => {\r\n            const openHandler = () => {\r\n                setReadyStatus(\"ready\")\r\n            }\r\n        wsChannel?.addEventListener(\"open\", openHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener(\"open\", openHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const onMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setNewMessage(e.currentTarget.value)\r\n    }\r\n    const sendMessage = () => {\r\n        if (!newMessage) {\r\n            return\r\n        }\r\n        wsChannel?.send(newMessage)\r\n        setNewMessage(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <textarea onChange = {onMessageChange} value ={newMessage}></textarea>\r\n            <button disabled = {wsChannel === null || readyStatus !== \"ready\"} onClick = {sendMessage}>Send</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Message: React.FC<{message: ChatMessageType}>= ({message}) => {\r\n        return (\r\n        <div className={style.message}>\r\n             <img src={message.photo}/><b>{message.userName}</b><span>{message.message}</span>\r\n             <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype ChatMessageType = {\r\nuserId: number\r\nuserName: string\r\nphoto: string\r\nmessage: string\r\n}\r\n"],"sourceRoot":""}