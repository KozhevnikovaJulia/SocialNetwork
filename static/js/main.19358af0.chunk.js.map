{"version":3,"sources":["components/Users/Users.module.css","components/Dialogs/Dialogs.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","images/iconfinder_user_male4_172628.png","components/NavBur/NavBur.module.css","components/NavBur/NavBur.tsx","components/Header/Header.tsx","components/Profile/MyPosts/Post/Post.tsx","redux/ProfileReducer.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","redux/DialogsReducer.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Users/Users.tsx","redux/UsersReducer.tsx","components/Users/UsersContainer.tsx","App.tsx","serviceWorker.ts","redux/StoreRedux.tsx","index.tsx"],"names":["module","exports","NavBur","className","style","navBur","item","to","activeClassName","active","Header","header","src","Post","props","post","message","likesCount","initialState","posts","id","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPost","type","changePost","postMessage","changePostActionCreator","PostElements","map","newPostElement","React","createRef","myPosts","onChange","current","value","ref","onClick","Profile","profileContant","ava","Dialog","dialog","name","Message","textMessage","dialogs","messages","newMessageText","DialogsContainer","dialogsPage","sendMessage","changeMessage","messageText","changeMessageActionCreator","DialogElements","MessageElements","dialogsContant","e","currentTarget","placeholder","Users","componentDidMount","Axios","get","then","response","setUsers","data","items","render","users","u","key","userAvatar","uniqueUrlName","userPhoto","followed","unfollow","follow","userInfo","city","country","status","Component","UsersContainer","usersPage","actionId","followActionCreator","unfollowActionCreator","setUsersActionCreator","App","path","Boolean","window","location","hostname","match","redusers","combineReducers","action","newPost","stateCopy","push","newMessage","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.19358af0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3Klio\",\"userAvatar\":\"Users_userAvatar__2ACyu\",\"userInfo\":\"Users_userInfo__ZPqTA\",\"city\":\"Users_city__29Uis\",\"country\":\"Users_country__2LALU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsContant\":\"Dialogs_dialogsContant__hGwIU\",\"dialogs\":\"Dialogs_dialogs__QDQRf\",\"messages\":\"Dialogs_messages__20rp8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContant\":\"Profile_profileContant__3dM-B\",\"ava\":\"Profile_ava__3haH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2lcYr\",\"posts\":\"MyPosts_posts__mwAOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3qeaM\",\"active\":\"Dialog_active__vrtRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1_tfC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1zl_i\"};","module.exports = __webpack_public_path__ + \"static/media/iconfinder_user_male4_172628.695aec55.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBur\":\"NavBur_navBur__3XnXd\",\"item\":\"NavBur_item__1QFyM\",\"active\":\"NavBur_active__1B9xd\"};","import React from 'react';\nimport style from './NavBur.module.css';\nimport {NavLink} from \"react-router-dom\";\n\n\nexport function NavBur() {\n  return (\n      <nav className={style.navBur}>\n        <div className={style.item}>\n          <NavLink to=\"/profile\" activeClassName={style.active}>Profile</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/dialogs\" activeClassName={style.active}>Dialogs</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/users\" activeClassName={style.active}>Users</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/news\" activeClassName={style.active}>News</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/music\" activeClassName={style.active}>Music</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/settings\" activeClassName={style.active}>Settings</NavLink>\n        </div>\n      </nav>\n\n  );\n}\n","import React from 'react';\nimport style from './Header.module.css';\n\nexport function Header() {\n  return (\n  <div className={style.header}>\n    <img src=\"https://www.clipartmax.com/png/full/342-3428376_vector-black-and-white-download-drawing-at-getdrawings-whisper-outline.png\"/>\n\n\n  </div>\n\n  );\n}\n\n","import React from 'react';\nimport style from \"./Post.module.css\";\n\ntype PostPropsType = {\n    message:string\n    likesCount: number\n    id: number\n}\n\nexport function Post(props: PostPropsType) {\n  return (\n      <div className={style.post}>\n        <img src=\"https://pbs.twimg.com/media/ECfnBGCXoAAAIRM.jpg:large\"/>\n        {props.message}\n        <div>\n          <span>Like</span> {props.likesCount}\n        </div>\n\n      </div>\n\n  );\n}\n\n","const ADD_POST = \"ADD-POST\"\nconst CHANGE_POST = \"CHANGE-POST\"\n\nexport type ActionTypes = AddPostActionType | ChangePostActionType | SendMessageActionType | ChangeMessageActionType\ntype AddPostActionType = {\ntype:\"ADD-POST\"\n}\ntype ChangePostActionType = {\n    type:\"CHANGE-POST\"\n    postMessage: string\n}\ntype SendMessageActionType = {\n    type: \"SEND-MESSAGE\"\n}\ntype ChangeMessageActionType = {\n    type: \"CHANGE-MESSAGE\"\n    messageText: string\n}\n\nexport type PostsPropsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\ntype InitialStateType = typeof initialState\n\nlet initialState = {\n    posts: [\n        { id: 1, message: \"It is my first post\", likesCount: 0 },\n        { id: 2, message: \"Hi\", likesCount: 4 },\n        { id: 3, message: \"Hello\", likesCount: 5 }\n    ] as Array<PostsPropsType>,\n    newPostText: \"OK\"\n}\n\nexport const profileReducer = (state= initialState, action: ActionTypes): InitialStateType => {\n    \n    switch (action.type) {\n        case ADD_POST: {\n            let newPost = { id: 5, message: state.newPostText, likesCount: 0 }\n\n            let stateCopy = { ...state }\n            stateCopy.posts = [...state.posts]\n\n            stateCopy.posts.push(newPost)\n            stateCopy.newPostText = \"\"\n            return stateCopy\n        }\n         case CHANGE_POST: {\n            let stateCopy = {...state}\n            stateCopy.newPostText = action.postMessage\n            return stateCopy\n         }\n    \n        default: return state\n    }\n}\nexport const addPostActionCreator = (): ActionTypes  => ({type: \"ADD-POST\"})\nexport const changePostActionCreator = (postMessage: string): ActionTypes  => ({type: \"CHANGE-POST\", postMessage })","import React from 'react';\nimport { MyPosts } from './MyPosts';\nimport { addPostActionCreator, changePostActionCreator } from '../../../redux/ProfileReducer';\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state: any) => {\n  return {\n     posts: state.profilePage.posts,\n     newPostText: state.profilePage.newPostText\n  }\n}\nlet mapDispatchToProps = (dispatch: Function) => {\n  return {\n    addPost: () => {\n      dispatch(addPostActionCreator())\n    },\n\n    changePost: (postMessage: string) => {\n      dispatch(changePostActionCreator(postMessage))\n    }\n  }\n}\n\nexport const MyPostsContainer = connect (mapStateToProps,  mapDispatchToProps )(MyPosts) \n\n","import React from 'react';\nimport style from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { PostsPropsType} from '../../../redux/Store';\n\ntype MyPostsPropsType = {\n addPost: ()=> void\n changePost: (postMessage:string)=> void\n posts: Array<PostsPropsType>\n newPostText: string\n}\n\nexport function MyPosts(props:MyPostsPropsType  ) {\n  debugger\n  let PostElements = props.posts.map ((post:PostsPropsType) => \n  <Post message={post.message} likesCount={post.likesCount} id={post.id} />)\n\n  let newPostElement = React.createRef<HTMLTextAreaElement>();\n\n  let addPost = props.addPost\n\n  let changePost = () => {\n    if (newPostElement.current) {\n      let postMessage = newPostElement?.current.value;\n      props.changePost(postMessage )\n    }\n  }\n  return (\n    <div className={style.myPosts}>\n      <h1>My posts</h1>\n      <div>\n        <textarea onChange={changePost} ref={newPostElement} value={props.newPostText}></textarea>\n        <button onClick={addPost}>Add post</button>\n      </div>\n      <div className={style.posts}>\n        {PostElements}\n\n      </div>\n    </div>\n\n  );\n}\n\n","import React from \"react\";\nimport style from \"./Profile.module.css\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\ntype ProfilePropsType = {\n    // store: any\n}\n\nexport function Profile(props:ProfilePropsType) {\n    return (\n        <div className={style.profileContant}>\n            <img src=\"https://sun9-72.userapi.com/c854024/v854024783/139230/wZlmqJc56E4.jpg\" />\n            <div className={style.ava}>\n                <img src=\"https://images.pexels.com/photos/3473525/pexels-photo-3473525.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"/>\n                ava\n            </div>\n            <MyPostsContainer />\n        </div>\n\n\n    );\n}","import React from \"react\";\nimport style from \"./Dialog.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogPropsType = {\n    name:string\n    id:number\n}\nexport function Dialog(props:DialogPropsType ) {\n    return (\n        <div className={style.dialog}>\n            <NavLink to={\"/dialogs/\" + props.id} activeClassName={style.active}>{props.name}</NavLink>\n        </div>\n\n    );\n}","import React from \"react\";\nimport style from \"./Message.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype MessagePropsType = {\n    textMessage: string\n    id:number\n}\nexport function Message(props:MessagePropsType) {\n    return (\n        <div className={style.message}>\n            {props.textMessage}\n        </div>\n    );\n}\n\n// export function MyPosts(props:MyPostsPropsType  ) {\n\n//     let PostElements = props.posts.map ((post:PostsPropsType) => <Post message={post.message} likesCount={post.likesCount} id={post.id} />\n//     )\n  \n//     let newPostElement = React.createRef<HTMLTextAreaElement>();\n  \n//     let addPost = () => {\n//           props.dispatch (addPostActionCreator());\n//            }\n  \n//       let changePost = () =>{\n//           if (newPostElement.current){\n//               let postMessage = newPostElement?.current.value;\n//               props.dispatch (changePostActionCreator (postMessage))\n//              }\n  \n//     }\n//     return (\n//     <div className={style.myPosts}>\n//       <h1>My posts</h1>\n//       <div>\n//         <textarea onChange={ changePost } ref={newPostElement} value={props.newPostText}></textarea>\n//         <button onClick={ addPost }>Add post</button>\n//       </div>\n//      <div className={style.posts}>\n//        {PostElements}\n  \n//      </div>\n  \n  \n//     </div>\n  \n//     );\n//   }","const SEND_MESSAGE = \"SEND-MESSAGE\"\nconst CHANGE_MESSAGE = \"CHANGE-MESSAGE\"\n\nexport type ActionTypes = AddPostActionType | ChangePostActionType | SendMessageActionType | ChangeMessageActionType\ntype AddPostActionType = {\ntype:\"ADD-POST\"\n}\ntype ChangePostActionType = {\n    type:\"CHANGE-POST\"\n    postMessage: string\n}\ntype SendMessageActionType = {\n    type: \"SEND-MESSAGE\"\n}\ntype ChangeMessageActionType = {\n    type: \"CHANGE-MESSAGE\"\n    messageText: string\n}\n\ntype MessagesType = {\n    id: number\n    textMessage: string\n}\n\ntype DialogArrayType = {\n    id: number\n    name: string\n}\n\ntype InitialStateType = typeof initialState\n\nlet initialState  = {\n    dialogs: [\n        { id: 1, name: \"Ann\" },\n        { id: 2, name: \"Andy\" },\n        { id: 3, name: \"Mike\" }\n    ] as Array<DialogArrayType>,\n    messages: [\n        { id: 1, textMessage: \"Hi\" },\n        { id: 2, textMessage: \"Hello\" },\n        { id: 3, textMessage: \"How are you\" }\n    ] as Array<MessagesType>,\n    newMessageText: \"\"\n}\n\nexport const dialogsReducer = (state = initialState, action: ActionTypes): InitialStateType => {\n    switch (action.type) {\n        case SEND_MESSAGE: {\n            let newMessage = { id: 6, textMessage: state.newMessageText }\n\n            let stateCopy = { ...state,\n            messages: [...state.messages] }\n            \n        stateCopy.messages.push(newMessage)\n        stateCopy.newMessageText = \"\"\n            return stateCopy\n        }\n         case CHANGE_MESSAGE: {\n            let stateCopy = {...state}\n            stateCopy.newMessageText = action.messageText\n            return stateCopy\n         }\n    \n        default: return state\n    }\n    \n}\nexport const sendMessageActionCreator = (): ActionTypes  => ({type: \"SEND-MESSAGE\"})\nexport const changeMessageActionCreator = (messageText: string): ActionTypes  => ({type: \"CHANGE-MESSAGE\", messageText })","import React, { ChangeEvent } from \"react\";\nimport {Dialogs} from \"./Dialogs\";\nimport {sendMessageActionCreator,changeMessageActionCreator} from \"../../redux/DialogsReducer\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state: any) => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n        newMessageText: state.newMessageText\n    }\n}\nlet mapDispatchToProps = (dispatch: Function) => {\n    return {\n        sendMessage: () => {\n            dispatch(sendMessageActionCreator())\n        },\n        changeMessage:  (messageText: string) => {\n            dispatch(changeMessageActionCreator(messageText))\n        }\n    }\n}\nexport const DialogsContainer = connect (mapStateToProps,mapDispatchToProps )(Dialogs)","import React, { ChangeEvent } from \"react\";\nimport style from \"./Dialogs.module.css\";\nimport {Dialog} from \"./Dialog/Dialog\";\nimport {Message} from \"./Message/Message\";\nimport {MessagesPropsType, DialogArrayPropsType,ActionTypes, sendMessageActionCreator,changeMessageActionCreator} from \"../../redux/Store\";\n\ntype DialogsPropsType = {\n    sendMessage: ()=> void\n    changeMessage: (messageText:string)=> void\n    newMessageText: string\n    dialogs: Array<DialogArrayPropsType>\n    messages: Array<MessagesPropsType>\n}\n\nexport function Dialogs(props:DialogsPropsType) {\n        let DialogElements = props.dialogs.map ((dialog:DialogArrayPropsType) =>{\n        return <Dialog id={dialog.id} name={dialog.name}  />\n    })\n    let MessageElements = props.messages.map ((message: MessagesPropsType) =>{\n        return <Message textMessage={message.textMessage} id={message.id} />\n    })\n    \n    const sendMessage = props.sendMessage\n    const changeMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let messageText = e.currentTarget.value\n        props.changeMessage(messageText)        \n    }\n \n    return (\n        <div className={style.dialogsContant}>\n            <div className={style.dialogs}>\n                {DialogElements}\n            </div>\n            <div className={style.messages}>\n                <div>{MessageElements}</div>\n                <div>\n                    <div><textarea value={props.newMessageText} onChange={changeMessage } placeholder=\"Enter your message\"></textarea>  </div>\n                    <div><button onClick={sendMessage}>Send message</button></div>\n                </div>\n            </div>\n        </div>\n\n\n\n);\n}","import React, { ChangeEvent } from \"react\";\nimport style from \"./Users.module.css\";\nimport {UserType} from \"../../redux/UsersReducer\";\nimport Axios from \"axios\";\nimport userPhoto from \"../../images/iconfinder_user_male4_172628.png\";\n\ntype UsersPropsType = {\n    users: Array<UserType>\n    follow: (actionId: number)=> void\n    unfollow: (actionId: number)=> void\n    setUsers: (users: Array<UserType>)=> void\n}\n\n\nexport class Users extends React.Component<UsersPropsType> {\n    componentDidMount = () => {\n        Axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\n            this.props.setUsers(response.data.items)\n        })\n    }\n    // getUsers = () => {\n    //     if (this.props.users.length === 0) {\n    //         Axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\n    //             this.props.setUsers(response.data.items)\n    //         })\n    //     }\n    // }\n    render = () => {\n        return <div>\n            {this.props.users.map(u => <div key={u.id} className={style.users} >\n                <div className={style.userAvatar}>\n                    <div><img src={u.uniqueUrlName ? u.uniqueUrlName : userPhoto} /></div>\n                    <div>{u.followed ?\n                        <button onClick={() => { this.props.unfollow(u.id) }}>Unfollow</button> :\n                        <button onClick={() => { this.props.follow(u.id) }}>Follow</button>} </div>\n                </div>\n                <div className={style.userInfo}>\n                    <h3>{u.name}</h3>\n                    <div className={style.city}>{\"u.location.city\"}</div>\n                    <div className={style.country}>{\"u.location.country\"}</div>\n                    <div>{u.status}</div>\n                </div>\n            </div>\n\n            )\n            }\n        </div>\n    }\n}","const FOLLOW = \"FOLLOW\"\nconst UNFOLLOW = \"UNFOLLOW\"\nconst SETUSERS = \"SET-USERS\"\n\nexport type ActionTypes = FollowActionType | UnfollowActionType | SetUsersActionType\ntype FollowActionType = {\ntype: \"FOLLOW\" \nactionId: number\n}\ntype UnfollowActionType = {\n    type:\"UNFOLLOW\"\n    actionId: number\n}\ntype SetUsersActionType = {\n    type:\"SET-USERS\"\n    users: Array<UserType>\n}\n\n// type LocationType = {\n//     city: string\n//     country: string\n// }\n// export type UserType = {\n//     id: number\n//     avatarUserUrl: string\n//     followed: boolean\n//     fullName: string\n//     status: string\n//     location: LocationType\n// }\ntype PhotosType = {\n    small: null | string\n    large: null | string\n}\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName: string\n    photos: PhotosType\n    status: string   \n    followed: boolean\n}\n\ntype InitialStateType = typeof initialState\n\nlet initialState = {\n    users: [\n        // { id: 1, avatarUserUrl:\"https://images.pexels.com/photos/789303/pexels-photo-789303.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\", followed: true, fullName: \"Julia Kozhevnikova\", status: \"I am a student\", location: {city: \"Moscow\", country: \"Russia\"} },\n        // { id: 2, avatarUserUrl:\"https://images.pexels.com/photos/792725/pexels-photo-792725.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\", followed: false, fullName: \"Alisa Kozhevnikova\", status: \"I am a child\", location: {city: \"Moscow\", country: \"Russia\"} },\n        // { id: 3, avatarUserUrl:\"https://images.pexels.com/photos/2182999/pexels-photo-2182999.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\", followed: true, fullName: \"Alina Kozhevnikova\", status: \"I am a child\", location: {city: \"Moscow\", country: \"Russia\"} },\n        // { id: 4, avatarUserUrl:\"https://images.pexels.com/photos/428328/pexels-photo-428328.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\", followed: true, fullName: \"Bob Bush\", status: \"I am a Bob\", location: {city: \"Moscow\", country: \"Russia\"} },\n    ] as Array<UserType>\n   }\n\nexport const usersReducer = (state= initialState, action: ActionTypes): InitialStateType => {\n    \n    switch (action.type) {\n        case FOLLOW: {\n\n            let stateCopy = {\n                ...state,\n                users: state.users.map( u => {\n                    if (u.id === action.actionId) {\n                        return { ...u, followed: true,\n                            // location: { ...u.location } \n                        }\n                    } else { return u }\n                })\n            }\n            return stateCopy\n        }\n        case UNFOLLOW: {\n            let stateCopy = {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.actionId) {\n                        return {\n                            ...u, followed: false,\n                            // location: { ...u.location }\n                        }\n                    } else { return u }\n                })\n        }\n            return stateCopy\n        }\n        case SETUSERS: {\n            let stateCopy = {\n                ...state,\n                users: [...state.users, ...action.users]\n        }\n            return stateCopy\n        }\n        default: return state\n    }\n}\nexport const followActionCreator = (actionId: number): ActionTypes  => ({type: \"FOLLOW\", actionId})\nexport const unfollowActionCreator = (actionId: number): ActionTypes  => ({type: \"UNFOLLOW\", actionId})\nexport const setUsersActionCreator = (users: Array<UserType>): ActionTypes  => ({type: \"SET-USERS\", users})","import {Users} from \"./Users\";\nimport {followActionCreator, unfollowActionCreator, setUsersActionCreator, UserType} from \"../../redux/UsersReducer\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state: any) => {\n    return {\n        users: state.usersPage.users        \n    }\n}\nlet mapDispatchToProps = (dispatch: Function) => {\n    return {\n        follow: (actionId: number) => {\n            dispatch(followActionCreator (actionId))\n        },\n        unfollow:  (actionId: number) => {\n            dispatch(unfollowActionCreator(actionId))\n        },\n        setUsers:  (users: Array<UserType >) => {\n            dispatch(setUsersActionCreator(users))\n        },\n    }\n}\nexport const UsersContainer = connect (mapStateToProps,mapDispatchToProps )(Users)","import React from \"react\";\nimport \"./App.css\";\nimport {Route, BrowserRouter} from \"react-router-dom\";\nimport {StatePropsType, ActionTypes} from \"./redux/Store\";\nimport {NavBur} from \"./components/NavBur/NavBur\";\nimport { Header } from \"./components/Header/Header\";\nimport { Profile } from \"./components/Profile/Profile\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\n\ntype AppPropsType = {\n  //  store: any\n}\n\nfunction App(props:AppPropsType) {\n  return (\n      <BrowserRouter>\n        <div className=\"app-wrapper\">\n        <Header />\n        <NavBur />\n        <div className=\"app-wrapper-content\">\n          <Route path=\"/profile\" render={() =>\n            <Profile />} />\n          <Route path=\"/dialogs\" render={() =>\n            <DialogsContainer />} />\n          <Route path=\"/users\" render={() =>\n            <UsersContainer />} />\n        </div>\n        </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\nimport {profileReducer} from \"./ProfileReducer\";\nimport {dialogsReducer} from \"./DialogsReducer\";\nimport { usersReducer } from \"./UsersReducer\";\n\n// export const addPostActionCreator = (): ActionTypes  => ({type: \"ADD-POST\"})\n// export const changePostActionCreator = (postMessage: string): ActionTypes  => ({type: \"CHANGE-POST\", postMessage })\n// export const sendMessageActionCreator = (): ActionTypes  => ({type: \"SEND-MESSAGE\"})\n// export const changeMessageActionCreator = (messageText: string): ActionTypes  => ({type: \"CHANGE-MESSAGE\", messageText })\n\n\nlet redusers = combineReducers (\n    {\n        profilePage: profileReducer,\n        dialogsPage: dialogsReducer,\n        usersPage: usersReducer\n    }\n)\n\ntype RedusersType = typeof redusers\nexport type AppStateType = ReturnType<RedusersType>\nlet state:AppStateType;\n\nexport let store = createStore (redusers)\n// @ts-ignore","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./redux/StoreRedux\";\nimport {Provider} from \"react-redux\"\n\n\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    )\n\n\n// rerenderTree(store.getState());\n\n// store.subscribe ( ()=> {\n//     let state = store.getState();\n//     rerenderTree(state)\n// });\nserviceWorker.unregister();\n"],"sourceRoot":""}