{"version":3,"sources":["components/NavBur/NavBur.module.css","components/Dialogs/Dialogs.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/NavBur/NavBur.tsx","components/Header/Header.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","serviceWorker.ts","State/State.tsx","index.tsx"],"names":["module","exports","NavBur","className","style","navBur","item","to","activeClassName","active","Header","header","src","Post","props","post","message","likesCount","MyPosts","PostElements","posts","map","id","newPostElement","React","createRef","myPosts","onChange","current","postMessage","value","changePost","ref","newPostText","onClick","addPost","Profile","profileContant","ava","Dialog","dialog","name","Message","textMessage","Dialogs","DialogElements","dialogs","MessageElements","messages","dialogsContant","App","path","render","state","profilePage","dialogsPage","Boolean","window","location","hostname","match","store","_state","_callsubscriber","console","log","getState","this","subscriber","observer","newPost","push","rerenderTree","ReactDOM","StrictMode","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,OAAS,yB,mBCAvFD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,QAAU,yBAAyB,SAAW,4B,mBCAjHD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,IAAM,uB,gBCAzED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,gBCA7DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,oBCA3DD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,kQCIlB,SAASC,IACd,OACI,yBAAKC,UAAWC,IAAMC,QACpB,yBAAKF,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAMK,QAA9C,YAEF,yBAAKN,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAMK,QAA9C,YAEF,yBAAKN,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBJ,IAAMK,QAA3C,SAEF,yBAAKN,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAMK,QAA5C,UAEF,yBAAKN,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAMK,QAA/C,c,qBClBH,SAASC,IACd,OACA,yBAAKP,UAAWC,IAAMO,QACpB,yBAAKC,IAAI,gI,uDCGN,SAASC,EAAKC,GACnB,OACI,yBAAKX,UAAWC,IAAMW,MACpB,yBAAKH,IAAI,0DACRE,EAAME,QACP,6BACE,sCADF,IACqBF,EAAMG,aCF5B,SAASC,EAAQJ,GAEtB,IAAIK,EAAeL,EAAMM,MAAMC,KAAK,SAACN,GAAD,OAAyB,kBAACF,EAAD,CAAMG,QAASD,EAAKC,QAASC,WAAYF,EAAKE,WAAYK,GAAIP,EAAKO,QAG5HC,EAAiBC,IAAMC,YAa3B,OACA,yBAAKtB,UAAWC,IAAMsB,SACpB,wCACA,6BACE,8BAAUC,SAXK,WACb,GAAIJ,EAAeK,QAAQ,CACvB,IAAIC,EAAW,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAgBK,QAAQE,MAC9ChB,EAAMiB,WAAWF,KAQeG,IAAKT,EAAgBO,MAAOhB,EAAMmB,cACpE,4BAAQC,QAhBE,WACRpB,EAAMqB,YAeR,aAEH,yBAAKhC,UAAWC,IAAMgB,OACnBD,ICxBC,SAASiB,EAAQtB,GACpB,OACI,yBAAKX,UAAWC,IAAMiC,gBAClB,yBAAKzB,IAAI,0EACT,yBAAKT,UAAWC,IAAMkC,KAClB,yBAAK1B,IAAI,0DADb,OAIA,kBAACM,EAAD,CAASE,MAAON,EAAMM,MAAOa,YAAanB,EAAMmB,YAAaE,QAASrB,EAAMqB,QAASJ,WAAYjB,EAAMiB,c,sCCf5G,SAASQ,EAAOzB,GACnB,OACI,yBAAKX,UAAWC,IAAMoC,QAClB,kBAAC,IAAD,CAASjC,GAAI,YAAcO,EAAMQ,GAAId,gBAAiBJ,IAAMK,QAASK,EAAM2B,O,qBCHhF,SAASC,EAAQ5B,GACpB,OACI,yBAAKX,UAAWC,IAAMY,SACjBF,EAAM6B,aCEZ,SAASC,EAAQ9B,GAEpB,IAAI+B,EAAiB/B,EAAMgC,QAAQzB,KAAK,SAACmB,GACrC,OAAO,kBAACD,EAAD,CAAQjB,GAAIkB,EAAOlB,GAAImB,KAAMD,EAAOC,UAE3CM,EAAkBjC,EAAMkC,SAAS3B,KAAK,SAACL,GACvC,OAAO,kBAAC0B,EAAD,CAASC,YAAa3B,EAAQ2B,YAAarB,GAAIN,EAAQM,QAElE,OACI,yBAAKnB,UAAWC,IAAM6C,gBAClB,yBAAK9C,UAAWC,IAAM0C,SACjBD,GAEL,yBAAK1C,UAAWC,IAAM4C,UACjBD,ICQFG,MApBf,SAAapC,GACX,OACI,kBAAC,IAAD,KACE,yBAAKX,UAAU,eACb,kBAACO,EAAD,MACA,kBAACR,EAAD,MACA,yBAAKC,UAAU,uBACb,kBAAC,IAAD,CAAOgD,KAAM,WAAWC,OAAS,kBAC7B,kBAAChB,EAAD,CAAShB,MAAON,EAAMuC,MAAMC,YAAYlC,MAC/Ba,YAAanB,EAAMuC,MAAMC,YAAYrB,YACrCE,QAASrB,EAAMqB,QACfJ,WAAYjB,EAAMiB,gBAC/B,kBAAC,IAAD,CAAOoB,KAAM,WAAWC,OAAS,kBAC7B,kBAACR,EAAD,CAASE,QAAShC,EAAMuC,MAAME,YAAYT,QAASE,SAAUlC,EAAMuC,MAAME,YAAYP,kBChBjFQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAkFeC,EAlFQ,CACnBC,OAAQ,CACJR,YAAa,CACTlC,MAAO,CACH,CAACE,GAAI,EAAGN,QAAS,sBAAuBC,WAAY,GACpD,CAACK,GAAI,EAAGN,QAAS,KAAMC,WAAY,GACnC,CAACK,GAAI,EAAGN,QAAS,QAASC,WAAY,IAE1CgB,YAAa,MAEjBsB,YAAa,CACTT,QAAS,CACL,CAACxB,GAAI,EAAGmB,KAAM,OACd,CAACnB,GAAI,EAAGmB,KAAM,QACd,CAACnB,GAAI,EAAGmB,KAAM,SAElBO,SAAU,CACN,CAAC1B,GAAI,EAAGqB,YAAa,MACrB,CAACrB,GAAI,EAAGqB,YAAa,SACrB,CAACrB,GAAI,EAAGqB,YAAa,kBAIjCoB,gBAvBmB,WAwBfC,QAAQC,IAAI,kBAEhBC,SA1BmB,WA2Bf,OAAOC,KAAKL,QAEhBM,WA7BmB,SA6BPC,GACRF,KAAKJ,gBAAkBM,GAG3BlC,QAjCmB,WAkCf,IAAImC,EAAU,CAAChD,GAAG,EAAGN,QAAQmD,KAAKL,OAAOR,YAAYrB,YAAahB,WAAW,GAC7EkD,KAAKL,OAAOR,YAAYlC,MAAMmD,KAAKD,GACnCH,KAAKL,OAAOR,YAAYrB,YAAa,GACrCkC,KAAKJ,mBAGThC,WAxCmB,SAwCNF,GACTsC,KAAKL,OAAOR,YAAYrB,YAAcJ,EACtCsC,KAAKJ,oBCpCFS,EAAe,WACtBC,IAASrB,OACL,kBAAC,IAAMsB,WAAP,KACI,kBAAC,EAAD,CAAKrB,MAAOQ,EAAMC,OAAQ3B,QAAS0B,EAAM1B,QAAQwC,KAAKd,GAAQ9B,WAAY8B,EAAM9B,WAAW4C,KAAKd,MAEpGe,SAASC,eAAe,UAIhCL,IACAX,EAAMO,WAAWI,GFyHX,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMrE,c","file":"static/js/main.d95a13f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBur\":\"NavBur_navBur__3XnXd\",\"item\":\"NavBur_item__1QFyM\",\"active\":\"NavBur_active__1B9xd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsContant\":\"Dialogs_dialogsContant__hGwIU\",\"dialogs\":\"Dialogs_dialogs__QDQRf\",\"messages\":\"Dialogs_messages__20rp8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContant\":\"Profile_profileContant__3dM-B\",\"ava\":\"Profile_ava__3haH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2lcYr\",\"posts\":\"MyPosts_posts__mwAOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3qeaM\",\"active\":\"Dialog_active__vrtRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1_tfC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1zl_i\"};","import React from 'react';\nimport style from './NavBur.module.css';\nimport {NavLink} from \"react-router-dom\";\n\n\nexport function NavBur() {\n  return (\n      <nav className={style.navBur}>\n        <div className={style.item}>\n          <NavLink to=\"/profile\" activeClassName={style.active}>Profile</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/dialogs\" activeClassName={style.active}>Dialogs</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/news\" activeClassName={style.active}>News</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/music\" activeClassName={style.active}>Music</NavLink>\n        </div>\n        <div className={style.item}>\n          <NavLink to=\"/settings\" activeClassName={style.active}>Settings</NavLink>\n        </div>\n      </nav>\n\n  );\n}\n","import React from 'react';\nimport style from './Header.module.css';\n\nexport function Header() {\n  return (\n  <div className={style.header}>\n    <img src=\"https://www.clipartmax.com/png/full/342-3428376_vector-black-and-white-download-drawing-at-getdrawings-whisper-outline.png\"/>\n\n\n  </div>\n\n  );\n}\n\n","import React from 'react';\nimport style from \"./Post.module.css\";\n\ntype PostPropsType = {\n    message:string\n    likesCount: number\n    id: number\n}\n\nexport function Post(props: PostPropsType) {\n  return (\n      <div className={style.post}>\n        <img src=\"https://pbs.twimg.com/media/ECfnBGCXoAAAIRM.jpg:large\"/>\n        {props.message}\n        <div>\n          <span>Like</span> {props.likesCount}\n        </div>\n\n      </div>\n\n  );\n}\n\n","import React from 'react';\nimport style from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { PostsPropsType } from '../../../State/State';\n\n\ntype MyPostsPropsType = {\n  posts:Array<PostsPropsType>\n  newPostText: string\n  addPost:()=>void\n  changePost:(postMessage:string)=>void\n}\n\nexport function MyPosts(props:MyPostsPropsType  ) {\n\n  let PostElements = props.posts.map ((post:PostsPropsType) => <Post message={post.message} likesCount={post.likesCount} id={post.id} />\n  )\n\n  let newPostElement = React.createRef<HTMLTextAreaElement>();\n\n  let addPost = () => {\n        props.addPost();\n         }\n\n    let changePost = () =>{\n        if (newPostElement.current){\n            let postMessage = newPostElement?.current.value;\n        props.changePost(postMessage)\n    }\n\n  }\n  return (\n  <div className={style.myPosts}>\n    <h1>My posts</h1>\n    <div>\n      <textarea onChange={ changePost } ref={newPostElement} value={props.newPostText}></textarea>\n      <button onClick={ addPost }>Add post</button>\n    </div>\n   <div className={style.posts}>\n     {PostElements}\n\n   </div>\n\n\n  </div>\n\n  );\n}\n\n","import React from \"react\";\nimport style from \"./Profile.module.css\";\nimport {MyPosts} from \"./MyPosts/MyPosts\";\nimport { PostsPropsType } from \"../../State/State\";\n\n\n\n\ntype ProfilePropsType = {\n    posts:Array<PostsPropsType>\n    newPostText: string\n    addPost:()=> void\n    changePost:(postMessage:string)=>void\n}\n\nexport function Profile(props:ProfilePropsType) {\n    return (\n        <div className={style.profileContant}>\n            <img src=\"https://sun9-72.userapi.com/c854024/v854024783/139230/wZlmqJc56E4.jpg\" />\n            <div className={style.ava}>\n                <img src=\"https://pbs.twimg.com/media/DyA2gApW0AE3IIK.jpg:large\"/>\n                ava\n            </div>\n            <MyPosts posts={props.posts} newPostText={props.newPostText} addPost={props.addPost} changePost={props.changePost}/>\n        </div>\n\n\n    );\n}","import React from \"react\";\nimport style from \"./Dialog.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogPropsType = {\n    name:string\n    id:number\n}\nexport function Dialog(props:DialogPropsType ) {\n    return (\n        <div className={style.dialog}>\n            <NavLink to={\"/dialogs/\" + props.id} activeClassName={style.active}>{props.name}</NavLink>\n        </div>\n\n    );\n}","import React from \"react\";\nimport style from \"./Message.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype MessagePropsType = {\n    textMessage: string\n    id:number\n}\nexport function Message(props:MessagePropsType) {\n    return (\n        <div className={style.message}>\n            {props.textMessage}\n        </div>\n    );\n}","import React from \"react\";\nimport style from \"./Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {Dialog} from \"./Dialog/Dialog\";\nimport {Message} from \"./Message/Message\";\nimport {MessagesPropsType, DialogArrayPropsType} from \"../../State/State\";\n\ntype DialogsPropsType = {\n    dialogs: Array<DialogArrayPropsType>\n    messages: Array<MessagesPropsType>\n\n}\n\nexport function Dialogs(props:DialogsPropsType) {\n\n    let DialogElements = props.dialogs.map ((dialog:DialogArrayPropsType) =>{\n        return <Dialog id={dialog.id} name={dialog.name}  />\n    })\n    let MessageElements = props.messages.map ((message: MessagesPropsType) =>{\n        return <Message textMessage={message.textMessage} id={message.id} />\n    })\n    return (\n        <div className={style.dialogsContant}>\n            <div className={style.dialogs}>\n                {DialogElements}\n            </div>\n            <div className={style.messages}>\n                {MessageElements}\n            </div>\n        </div>\n\n\n\n);\n}","import React from \"react\";\nimport \"./App.css\";\nimport {Route, BrowserRouter} from \"react-router-dom\";\nimport {StatePropsType} from \"./State/State\";\nimport {NavBur} from \"./components/NavBur/NavBur\";\nimport { Header } from \"./components/Header/Header\";\nimport { Profile } from \"./components/Profile/Profile\";\nimport {Dialogs} from \"./components/Dialogs/Dialogs\";\n\ntype AppPropsType = {\n  state: StatePropsType\n  addPost:()=> void\n  changePost:(postMessage:string)=> void\n}\n\nfunction App(props:AppPropsType) {\n  return (\n      <BrowserRouter>\n        <div className=\"app-wrapper\">\n          <Header/>\n          <NavBur/>\n          <div className=\"app-wrapper-content\">\n            <Route path= \"/profile\" render={ () =>\n                <Profile posts={props.state.profilePage.posts}\n                         newPostText={props.state.profilePage.newPostText}\n                         addPost={props.addPost}\n                         changePost={props.changePost}/>} />\n            <Route path= \"/dialogs\" render={ () =>\n                <Dialogs dialogs={props.state.dialogsPage.dialogs} messages={props.state.dialogsPage.messages} />}/>\n          </div>\n        </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import App from \"../App\";\n\nlet store: StoreType = {\n    _state: {\n        profilePage: {\n            posts: [\n                {id: 1, message: \"It is my first post\", likesCount: 0},\n                {id: 2, message: \"Hi\", likesCount: 4},\n                {id: 3, message: \"Hello\", likesCount: 5}\n            ],\n            newPostText: \"OK\"\n        },\n        dialogsPage: {\n            dialogs: [\n                {id: 1, name: \"Ann\"},\n                {id: 2, name: \"Andy\"},\n                {id: 3, name: \"Mike\"}\n            ],\n            messages: [\n                {id: 1, textMessage: \"Hi\"},\n                {id: 2, textMessage: \"Hello\"},\n                {id: 3, textMessage: \"How are you\"}\n            ]\n        }\n    },\n    _callsubscriber() {\n        console.log(\"State changed\")\n    },\n    getState () {\n        return this._state;\n    },\n    subscriber (observer:any) {\n        this._callsubscriber = observer\n    },\n\n    addPost  () {\n        let newPost = {id:5, message:this._state.profilePage.newPostText, likesCount:0};\n        this._state.profilePage.posts.push(newPost);\n        this._state.profilePage.newPostText= \"\";\n        this._callsubscriber()\n    },\n\n    changePost  (postMessage:string) {\n        this._state.profilePage.newPostText = postMessage;\n        this._callsubscriber()\n    }\n\n\n}\n\nexport type MessagesPropsType = {\n    id: number\n    textMessage: string\n}\nexport type DialogArrayPropsType = {\n    id: number\n    name: string\n}\nexport type PostsPropsType = {\n    id: number\n    message: string\n    likesCount: number\n}\nexport type ProfilePagePropsType ={\n    posts: Array<PostsPropsType>\n    newPostText: string\n}\ntype DialogsPagePropsType ={\n    dialogs:Array<DialogArrayPropsType>\n    messages: Array<MessagesPropsType>\n}\nexport type StatePropsType = {\n    profilePage:ProfilePagePropsType\n    dialogsPage:DialogsPagePropsType\n}\ntype StoreType = {\n    _state:StatePropsType\n    getState: () => void\n    _callsubscriber:() => void\n    addPost:() => void\n    changePost:(postMessage:string) => void\n    subscriber:(observer:any) => void\n}\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./State/State\";\n\n\nexport let rerenderTree = ()=> {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App state={store._state} addPost={store.addPost.bind(store)} changePost={store.changePost.bind(store)} />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrerenderTree();\nstore.subscriber(rerenderTree);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}